# Walkabout is an outdoor style perfect for hiking or getting out and about, with
# mountains, ski trails, biking paths, and transit stops.
#
# Give OpenStreetMap data a professional basemap skin using the Tangram graphics library
# and Mapzen's versatile Vector Tiles.
#
# Please use and adapt the open source scene file in your own projects!
#
# Authors: Geraldine Sarmiento, Nathaniel V. Kelso
# Read more: https://github.com/tangrams/walkabout-style
#

# put your mapzen api key in this file
# Sign up for a Mapzen API key to enjoy higher rate limits
# https://mapzen.com/documentation/overview/#developer-accounts-and-api-keys
import: config.yaml

global:
    #ux/ui
    ux_language: en             # l10n language code, trusting OSM in v0.10 tiles, fixed in v1.0 tiles
    ux_language_fallback: false    # l10n language code, trusting OSM in v0.10 tiles, fixed in v1.0 tiles
    ux_language_text_source: |
        function() {
            // if a ux_langauge has been defined use that, else if there is feature name in the fallback_ux_language then use that, else use the feature's default name in the local language
            return (global.ux_language && feature['name:'+global.ux_language]) || (global.ux_language_fallback && feature['name:'+global.ux_language_fallback]) || feature.name;
        }
    ux_language_text_source_boundary_lines: |
        function() {
            var right = (global.ux_language && feature['name:right:'+global.ux_language]) || (global.ux_language_fallback && feature['name:right:'+global.ux_language_fallback]) || feature['name:right'];
            var left = (global.ux_language && feature['name:left:'+global.ux_language]) || (global.ux_language_fallback && feature['name:left:'+global.ux_language_fallback]) || feature['name:left'];
            if( right && left ) {
                //if( right.includes(' ') || left.includes(' ') ) {
                    return left + " - " + right;
                //} else {
                //    return right + '\n' + left;
                //}
            } else {
                return (global.ux_language && feature['name:'+global.ux_language]) || (global.ux_language_fallback && feature['name:'+global.ux_language_fallback]) || feature.name;
            }
        }
    ux_language_text_source_short: |
        function() {
            return (global.ux_language && feature['name:short:'+global.ux_language]) || (global.ux_language_fallback && feature['name:short:'+global.ux_language_fallback]) || feature['name:short'];
        }
    ux_language_text_source_short_proxy_name: |
        function() {
            var name  = (global.ux_language && feature['name:'+global.ux_language]) || (global.ux_language_fallback && feature['name:'+global.ux_language_fallback]) || feature['name'] || '';
            var short = (global.ux_language && feature['name:short:'+global.ux_language]) || (global.ux_language_fallback && feature['name:short:'+global.ux_language_fallback]) || feature['name:short'];
            return short ? name : '';
        }
    ux_language_text_source_abbreviation: |
        function() {
            var name  = (global.ux_language && feature['name:'+global.ux_language]) || (global.ux_language_fallback && feature['name:'+global.ux_language_fallback]) || feature['name'] || '';
            var abbrev = (global.ux_language && feature['name:abbreviation:'+global.ux_language]) || (global.ux_language_fallback && feature['name:abbreviation:'+global.ux_language_fallback]) || feature['name:abbreviation'];
            return abbrev || name;
        }
    ux_language_text_source_iata: |
        function() {
            var name = (global.ux_language && feature['name:'+global.ux_language]) || (global.ux_language_fallback && feature['name:'+global.ux_language_fallback]) || feature['name'];
            if(feature.iata) {
                if (name) {
                    return name + ' (' + feature.iata + ')';
                }
                else {
                    return feature.iata;
                }
            } else {
                return name;
            }
        }
    ux_language_text_source_ocean: |
        function() {
            var name = (global.ux_language && feature['name:'+global.ux_language]) || (global.ux_language_fallback && feature['name:'+global.ux_language_fallback]) || feature['name'] || '';
            name = name.split(' ').join('\n');
            return name.split('').join('  ');
        }
    ux_language_text_source_sea: |
        function() {
            var name = (global.ux_language && feature['name:'+global.ux_language]) || (global.ux_language_fallback && feature['name:'+global.ux_language_fallback]) || feature['name'] || '';
            name = name.split(' ').join('\n');
            return name.split('').join(' ');
        }
    ux_language_text_source_continent_stacked_only: |
        function() {
            var name = (global.ux_language && feature['name:'+global.ux_language]) || (global.ux_language_fallback && feature['name:'+global.ux_language_fallback]) || feature['name'] || '';
            return name.split(' ').join('\n');
        }
    ux_language_text_source_continent: |
        function() {
            var name = (global.ux_language && feature['name:'+global.ux_language]) || (global.ux_language_fallback && feature['name:'+global.ux_language_fallback]) || feature['name'] || '';
            name = name.split(' ').join('\n');
            return name.split('').join(' ');
        }
    ux_language_text_source_road_ref_and_name: |
        function() {
            // if a ux_langauge has been defined use that, else if there is feature name in the fallback_ux_language then use that, else use the feature's default name in the local language
            return (global.ux_language && feature['name:'+global.ux_language]) || (global.ux_language_fallback && feature['name:'+global.ux_language_fallback]) || feature.name;

            /*
            var name = (global.ux_language && feature['name:'+global.ux_language]) || (global.ux_language_fallback && feature['name:'+global.ux_language_fallback]) || feature['name'];
            if(feature.ref && name) {
                return (feature.ref + ' ' + name);
            } else {
                return name;
            }
            */
        }
    ux_language_text_source_road_ref_and_name_short: |
        function() {
            // if a ux_langauge has been defined use that, else if there is feature name in the fallback_ux_language then use that, else use the feature's default name in the local language
            return (global.ux_language && feature['name:'+global.ux_language]) || (global.ux_language_fallback && feature['name:'+global.ux_language_fallback]) || feature.name;

            /*
            var name = (global.ux_language && feature['name:'+global.ux_language]) || (global.ux_language_fallback && feature['name:'+global.ux_language_fallback]) || feature['name'];
            if (feature.ref && (feature.ref.length < 6) && name) {
                return feature.ref + ' ' + name;
            } else {
                return name;
            }
            */
        }
    ux_language_text_source_piste_advanced: |
        function() {
            var name = (global.ux_language && feature['name:'+global.ux_language]) || (global.ux_language_fallback && feature['name:'+global.ux_language_fallback]) || feature['name'];
            return name ? ('◆ ' + name) : '◆';
        }
    ux_language_text_source_piste_expert: |
        function() {
            var name = (global.ux_language && feature['name:'+global.ux_language]) || (global.ux_language_fallback && feature['name:'+global.ux_language_fallback]) || feature['name'];
            return name ? ('◆◆ ' + name) : '◆◆';
        }
    ux_language_text_source_building_and_address: |
        function() {
            var name = (global.ux_language && feature['name:'+global.ux_language]) || (global.ux_language_fallback && feature['name:'+global.ux_language_fallback]) || feature['name'];
            if (name && feature.addr_housenumber) {
                return name + '\n' + feature.addr_housenumber;
            } else {
                return name;
            }
        }

    # To facilitate data visualizations several recommended sort orders are provided
    #
    # Your classic raster map overlay.
    # Over all line and polygon features.
    # Under map labels (icons and text), under UI elements
    # (like routeline and search result pins).
    sdk_order_over_everything_but_text_0: 490
    sdk_order_over_everything_but_text_1: 491
    sdk_order_over_everything_but_text_2: 492
    sdk_order_over_everything_but_text_3: 493
    sdk_order_over_everything_but_text_4: 494
    sdk_order_over_everything_but_text_5: 495
    sdk_order_over_everything_but_text_6: 496
    sdk_order_over_everything_but_text_7: 497
    sdk_order_over_everything_but_text_8: 498
    sdk_order_over_everything_but_text_9: 499
    #
    # Your classic "underlay"
    # Under roads. Above borders, water, landuse, and earth.
    sdk_order_under_roads_0: 290
    sdk_order_under_roads_1: 291
    sdk_order_under_roads_2: 292
    sdk_order_under_roads_3: 293
    sdk_order_under_roads_4: 294
    sdk_order_under_roads_5: 295
    sdk_order_under_roads_6: 296
    sdk_order_under_roads_7: 297
    sdk_order_under_roads_8: 298
    sdk_order_under_roads_9: 299
    #
    # Under water.
    # Above earth and most landuse.
    sdk_order_under_water_0: 190
    sdk_order_under_water_1: 191
    sdk_order_under_water_2: 192
    sdk_order_under_water_3: 193
    sdk_order_under_water_4: 194
    sdk_order_under_water_5: 195
    sdk_order_under_water_6: 196
    sdk_order_under_water_7: 197
    sdk_order_under_water_8: 198
    sdk_order_under_water_9: 199
    #
    # Under everything.
    # Tip: disable earth layer.
    sdk_order_under_everything_0: 0
    sdk_order_under_everything_1: 1
    sdk_order_under_everything_2: 2
    sdk_order_under_everything_3: 3
    sdk_order_under_everything_4: 4
    sdk_order_under_everything_5: 5
    sdk_order_under_everything_6: 6
    sdk_order_under_everything_7: 7
    sdk_order_under_everything_8: 8
    sdk_order_under_everything_9: 9
    #
    # TRANSIT OVERLAY
    # should default to "auto", with SDK overriding it to true or false,
    # or app logic sets other booleans that triggers auto behavior later
    sdk_transit_overlay: false
    #
    # SHIELDS
    sdk_shield_color: black
    sdk_shield_text_color: white
    #
    # enable interactivity for key features
    interactive: true
    #
    # default order for basemap features
    feature_order: function() { return feature.sort_rank; }
    sdk_building_extrude:               true              # building extrusion toggle
    #

    #cameras:
    camera_settings: { type: isometric, axis: [-.2, .2] }

    #lights:
    light_settings: { type: directional, direction: [1, 1, -.9], diffuse: 0.5, ambient: 0.85 }


    background:                         '#fff'

    #water
    water_visible_ocean:                true # ∆
    water_visible_inland_water:         true # ∆
    water_visible_swimming_pools:       false # ∆
    #water Color
    water:                              '#B4DDF4' # ∆

    #landuse
    landuse_style:                      polygons # ∆
    landuse_visible_airports:           true # ∆
    landuse_visible_beach:              true # ∆
    landuse_visible_cemetery:           true # ∆
    landuse_visible_college:            true # ∆
    landuse_visible_school:             true
    landuse_visible_forest:             true # ∆
    landuse_visible_hospital:           true # ∆
    landuse_visible_military:           true # ∆
    landuse_visible_park:               true # ∆
    landuse_visible_pier:               true # ∆
    landuse_visible_prison:             true # ???
    landuse_visible_resort:             true # ∆
    landuse_visible_stadium:            true # ?? NOT WORKING ??  should also be adjusted to say Stadium, Ski trails
    landuse_visible_wetland:            true # ∆
    #landuse colors
    landuse_beach:                      '#F8F4E1'
    landuse_airports:                   '#eff0ef'
    landuse_cemetery:                   '#E4E4D5'
    landuse_college:                    '#F2F0E7'
    landuse_school:                     '#F2F0E7'
    # - &forest                         '#E7F1CA'
    landuse_hospital:                   '#E2EDEF'
    landuse_military:                   '#eff0ef'
    landuse_park:                       '#E7F1CA'
    landuse_farm:                       '#F5FBE7'
    # - &prison                         '#eff0ef'
    landuse_theme_park:                 '#F9F3D6'
    landuse_stadium:                    '#F9F3D6'
    landuse_wetland:                    '#E1E9DB'

    #borders
    borders_visible_countries:          true # ∆
    borders_visible_disputed:           true # ∆
    borders_visible_states:             true # ∆
    borders_visible_counties:           false # ∆
    #border colors:
    nation_boundary:                    '#a7a8ab' # ∆
    state_boundary:                     '#827676' # ∆
    county_boundary:                    '#a39a96' # ∆

    #roads/transit
    roads_visible_highways:             true  # ∆
    roads_visible_highway_ramps:        true # ∆
    roads_visible_major:                true # ∆
    roads_visible_minor:                true # ∆
    roads_visible_service:              true # ∆
    roads_visible_taxi_and_runways:     true # ∆
    roads_visible_ferry_route:          false # ∆
    roads_visible_paths:                false
    transit_visible:                    false   # ∆
    rail_visible:                       true   # ∆
    #road/transit colors
    road_color:                         '#a6a6a6' # ∆
    minor_road:                         '#cccecf' # ∆
    road_text:                          '#000' # ∆
    road_text_minor:                    '#666' # ∆
    rail_line:                          '#cccecf' # ∆
    runway:                             '#cccecf' # ∆
    aeroway:                            '#dbdddf' # ∆
    ferry_route:                        '#8AB1CD' # ∆

    #structures
    buildings_visible:                  false # ∆
    buildings_border_visible:           false # ∆
    buildings:                          '#f7f9fc'
    building_outline:                   '#888' #
    city_wall:                          [0.682,0.682,0.682] # these need addressing
    dam:                                [0.827,0.808,0.780] # these need addressing

    #icons
    icon_visible_poi_landuse:           true # ∆

    #labels:
    labels_visible_countries:           true # ∆
    labels_visible_states:              true # ∆
    labels_visible_cities:              true # ∆
    labels_visible_highway_shields:     true # ∆
    labels_visible_major_roads:         true # ∆
    labels_visible_minor_roads:         false # ∆
    labels_visible_service_road:        true # ∆ this should be added to  UI list as Paths, service roads
    labels_visible_water:               true # ∆
    labels_visible_neighborhoods:       false # ∆
    labels_visible_points_of_interest:  false # ∆
    labels_visible_landuse:             true
    labels_visible_building:            false # ∆ saved for possible future inclusion
    labels_visible_address:             false # ∆ saved for possible future inclusion
    labels_visible_airport_gate:        false # not used but saving for later
    #label colors
    text_fill:                          '#000'    # ∆
    text_fill_gray:                     '#474747' # ∆
    text_water:                         '#5b7c9a' # ∆
    text_stroke:                        '#fff'    # ∆
    #label fonts
    text_font_family:                   'Benton'  # ∆


fonts:
    Benton:
       - weight: 300 # Light
         url: /fonts/open-sans-condensed/light/OpenSans-CondLight-webfont.woff
       - weight: normal # Regular
         url: /fonts/open-sans-condensed/bold/OpenSans-CondBold-webfont.woff
       - weight: normal # Regular
         style: italic
         url: /fonts/open-sans-condensed/italic-light/OpenSans-CondLightItalic-webfont.woff
       - weight: 600 # Semi Bold
         url: /fonts/open-sans-condensed/bold/OpenSans-CondBold-webfont.woff
       - weight: 600 # Semi Bold
         style: italic
         url: /fonts/open-sans-condensed/bold/OpenSans-CondBold-webfont.woff
       - weight: bold
         url: /fonts/open-sans-condensed/bold/OpenSans-CondBold-webfont.woff
       - weight: condnensed
         url: /fonts/open-sans-condensed/light/OpenSans-CondLight-webfont.woff


cameras:
    camera1: global.camera_settings

scene:
    background:
        color: global.background

# need corresponding if you want POI labels show up
textures:
    pois:
        url: images/walkabout2@2x.png
        #url: https://raw.githubusercontent.com/tangrams/walkabout-style/gh-pages/images/walkabout%402x.png
        filtering: mipmap
        sprites:
            # define sprites: [x origin, y origin, width, height]
            'US:CA-1char': [220, 854, 82, 92]
            'US:CA-2char': [120, 854, 94, 94]
            'US:CA-3char': [0, 854, 112, 92]
            'US:CA-4char': [876, 758, 126, 92]
            'US:CA-5char': [740, 758, 128, 92]
            'US:I-1char': [0, 958, 90, 100]
            'US:I-2char': [446, 470, 102, 102]
            'US:I-3char': [308, 470, 132, 100]
            'US:I-4char': [160, 470, 140, 100]
            'US:I-5char': [0, 470, 152, 100]
            'US:NY-1char': [176, 666, 72, 88]
            'US:NY-2char': [460, 574, 88, 88]
            'US:NY-3char': [348, 574, 104, 86]
            'US:NY-4char': [224, 574, 116, 86]
            'US:NY-5char': [96, 574, 120, 86]
            'US:PA-1char': [96, 666, 72, 88]
            'US:PA-2char': [0, 666, 88, 88]
            'US:PA-3char': [820, 574, 112, 88]
            'US:PA-4char': [692, 574, 120, 88]
            'US:PA-5char': [556, 574, 128, 88]
            'US:US-1char': [900, 854, 88, 96]
            'US:US-2char': [788, 854, 106, 94]
            'US:US-3char': [642, 854, 138, 100]
            'US:US-4char': [478, 854, 158, 100]
            'US:US-5char': [308, 854, 164, 100]
            airport: [952, 0, 38, 38]
            aerodrome: [952, 0, 38, 38]
            allotments: [874, 252, 38, 38]
            aquarium: [230, 210, 38, 38]
            arrow: [552, 294, 38, 38]
            atm: [0, 168, 38, 38]
            attraction: [872, 210, 38, 38]
            bakery: [640, 168, 38, 38]
            bank: [46, 168, 38, 38]
            category-predicate-money: [46, 168, 38, 38]
            bar: [322, 168, 38, 38]
            pub: [322, 168, 38, 38]
            category-predicate-drink: [322, 168, 38, 38]
            baseball: [552, 84, 38, 38]
            basketball: [506, 84, 38, 38]
            battlefield: [138, 252, 38, 38]
            bbq: [552, 252, 38, 38]
            beach: [690, 84, 38, 38]
            beach_resort: [46, 252, 38, 38]
            bench: [630, 0, 38, 38]
            bicycle: [964, 126, 38, 38]
            bicycle_rental: [964, 126, 38, 38]
            bicycle_rental_station: [964, 126, 38, 38]
            bicycle_parking: [736, 126, 38, 38]
            biergarten: [780, 210, 38, 38]
            brewery: [780, 210, 38, 38]
            bike_bicycle: [962, 168, 38, 38]
            bike_bicycle_parking: [92, 210, 38, 38]
            bike_bicycle_rental_station: [46, 210, 38, 38]
            bike_bicycle_repair_station: [0, 210, 38, 38]
            bike_cafe: [824, 168, 38, 38]
            bike_cycle_barrier: [732, 168, 38, 38]
            bike_drinking_water: [870, 168, 38, 38]
            bike_pub: [778, 168, 38, 38]
            bike_toilets: [916, 168, 38, 38]
            boat_rental: [920, 252, 38, 38]
            books: [918, 126, 38, 38]
            bridge: [966, 84, 38, 38]
            buddhist: [828, 84, 38, 38]
            building: [506, 168, 38, 38]
            hangar: [506, 168, 38, 38]
            nursing_home: [506, 168, 38, 38]
            manor: [506, 168, 38, 38]
            apartments: [506, 168, 38, 38]
            care_home: [506, 168, 38, 38]
            bus_station: [860, 0, 38, 38]
            bus_stop: [860, 0, 38, 38]
            butcher: [0, 84, 38, 38]
            cafe: [594, 168, 38, 38]
            camp_site: [874, 84, 38, 38]
            capital-l: [726, 296, 32, 32]
            capital-m: [694, 296, 24, 24]
            capital-s: [664, 296, 20, 20]
            capital-xl: [814, 296, 40, 40]
            capital-xs: [642, 296, 16, 16]
            car: [872, 126, 38, 38]
            category-namespace-mobility: [872, 126, 38, 38]
            category-predicate-mobility: [872, 126, 38, 38]
            car_repair: [92, 168, 38, 38]
            car_sharing: [676, 0, 38, 38]
            caravan_site: [276, 252, 38, 38]
            castle: [460, 42, 38, 38]
            fort: [460, 42, 38, 38]
            cemetery: [782, 84, 38, 38]
            grave_yard: [782, 84, 38, 38]
            christian: [276, 126, 38, 38]
            cinema: [276, 210, 38, 38]
            clothes: [322, 210, 38, 38]
            fashion: [322, 210, 38, 38]
            college: [368, 210, 38, 38]
            university: [368, 210, 38, 38]
            confectionery: [504, 210, 38, 38]
            convenience: [138, 84, 38, 38]
            county_shield-1char: [256, 666, 72, 72]
            county_shield-2char: [0, 574, 88, 72]
            county_shield-3char: [868, 470, 104, 72]
            county_shield-4char: [724, 470, 136, 72]
            county_shield-5char: [556, 470, 160, 72]
            courthouse: [446, 0, 38, 38]
            dam: [368, 294, 38, 38]
            dentist: [266, 0, 38, 38]
            department_store: [826, 126, 38, 38]
            doctors: [224, 0, 38, 38]
            clinic: [224, 0, 38, 38]
            dog_park: [460, 252, 38, 38]
            dot-black: [506, 294, 38, 38]
            dot-white: [322, 294, 38, 38]
            drinking_water: [734, 210, 38, 38]
            dry_cleaning: [92, 84, 38, 38]
            electronics: [690, 126, 38, 38]
            computer: [690, 126, 38, 38]
            enclosure: [414, 294, 38, 38]
            estate_agent: [184, 42, 38, 38]
            factory: [460, 168, 38, 38]
            industrial: [460, 168, 38, 38]
            chimney: [460, 168, 38, 38]
            substation: [460, 168, 38, 38]
            wastewater_plant: [460, 168, 38, 38]
            works: [460, 168, 38, 38]
            water_works: [460, 168, 38, 38]
            plant: [460, 168, 38, 38]
            generator: [460, 168, 38, 38]
            category-predicate-industry: [460, 168, 38, 38]
            fast_food: [642, 210, 38, 38]
            ferry: [906, 0, 38, 38]
            ferry_terminal: [906, 0, 38, 38]
            fire_station: [400, 0, 38, 38]
            firepit: [414, 252, 38, 38]
            fishing: [322, 252, 38, 38]
            fishing_area: [322, 252, 38, 38]
            fitness: [966, 42, 38, 38]
            fitness_station: [966, 42, 38, 38]
            florist: [230, 126, 38, 38]
            forest: [550, 210, 38, 38]
            natural_forest: [550, 210, 38, 38]
            nature_reserve: [550, 210, 38, 38]
            conservation: [550, 210, 38, 38]
            protected_area: [550, 210, 38, 38]
            grass: [550, 210, 38, 38]
            fountain: [368, 126, 38, 38]
            fuel: [458, 210, 38, 38]
            gallery: [138, 210, 38, 38]
            garden: [736, 84, 38, 38]
            gas_canister: [46, 294, 38, 38]
            gate: [460, 294, 38, 38]
            generic: [596, 294, 38, 38]
            category-namespace-other: [596, 294, 38, 38]
            category-predicate-addressing: [596, 294, 38, 38]
            generic_shield-1char: [928, 666, 72, 72]
            generic_shield-2char: [824, 666, 98, 72]
            generic_shield-3char: [684, 666, 132, 72]
            generic_shield-4char: [524, 666, 152, 72]
            generic_shield-5char: [336, 666, 180, 72]
            geyser: [0, 252, 38, 38]
            gift: [184, 126, 38, 38]
            golf_course: [460, 84, 38, 38]
            government: [230, 168, 38, 38]
            townhall: [230, 168, 38, 38]
            public: [230, 168, 38, 38]
            embassy: [230, 168, 38, 38]
            category-predicate-civic: [230, 168, 38, 38]
            hairdresser: [92, 42, 38, 38]
            hardware: [920, 42, 38, 38]
            doityourself: [920, 42, 38, 38]
            painter: [920, 42, 38, 38]
            historical: [138, 126, 38, 38]
            hospital: [182, 0, 38, 38]
            category-namespace-health: [182, 0, 38, 38]
            category-predicate-health: [182, 0, 38, 38]
            hot_spring: [322, 84, 38, 38]
            hotel: [814, 0, 38, 38]
            motel: [814, 0, 38, 38]
            hostel: [814, 0, 38, 38]
            category-predicate-sleep: [814, 0, 38, 38]
            hunting: [962, 210, 38, 38]
            ice_cream: [826, 210, 38, 38]
            information: [918, 210, 38, 38]
            jewelry: [782, 42, 38, 38]
            jewish: [44, 0, 38, 38]
            landmark: [354, 0, 38, 38]
            memorial: [354, 0, 38, 38]
            monument: [354, 0, 38, 38]
            tower: [354, 0, 38, 38]
            beacon: [354, 0, 38, 38]
            laundry: [736, 42, 38, 38]
            library: [0, 0, 38, 38]
            light_rail: [768, 0, 38, 38]
            tram_stop: [768, 0, 38, 38]
            lighthouse: [276, 84, 38, 38]
            liquor: [598, 126, 38, 38]
            alcohol: [598, 126, 38, 38]
            mall: [690, 42, 38, 38]
            marina: [184, 168, 38, 38]
            dock: [184, 168, 38, 38]
            mine: [828, 42, 38, 38]
            mobile_phone: [552, 42, 38, 38]
            motorcycle: [690, 252, 38, 38]
            museum: [92, 126, 38, 38]
            music: [414, 42, 38, 38]
            muslim: [90, 0, 38, 38]
            newspaper: [368, 42, 38, 38]
            kiosk: [368, 42, 38, 38]
            observatory: [0, 294, 38, 38]
            office: [644, 84, 38, 38]
            insurance: [644, 84, 38, 38]
            company: [644, 84, 38, 38]
            category-predicate-service: [644, 84, 38, 38]
            optician: [322, 42, 38, 38]
            outdoor: [138, 294, 38, 38]
            park: [322, 126, 38, 38]
            national_park: [322, 126, 38, 38]
            protected_area: [322, 126, 38, 38]
            category-predicate-nature: [322, 126, 38, 38]
            parking: [782, 126, 38, 38]
            peak: [230, 84, 38, 38]
            pet: [276, 42, 38, 38]
            pharmacy: [46, 84, 38, 38]
            photographic_laboratory: [230, 42, 38, 38]
            photographer: [230, 42, 38, 38]
            picnic_site: [644, 252, 38, 38]
            picnic_table: [644, 252, 38, 38]
            pier: [722, 0, 38, 38]
            place_of_worship: [368, 168, 38, 38]
            chapel: [368, 168, 38, 38]
            wayside_shrine: [368, 168, 38, 38]
            category-predicate-religion: [368, 168, 38, 38]
            playground: [506, 42, 38, 38]
            police: [308, 0, 38, 38]
            post_office: [414, 168, 38, 38]
            quarry: [874, 42, 38, 38]
            mineshaft: [874, 42, 38, 38]
            adit: [874, 42, 38, 38]
            ranger_station: [598, 252, 38, 38]
            recreation_track: [782, 252, 38, 38]
            recycling: [138, 42, 38, 38]
            restaurant: [596, 210, 38, 38]
            category-namespace-eat_and_drink: [596, 210, 38, 38]
            category-predicate-eat: [596, 210, 38, 38]
            retail: [644, 42, 38, 38]
            store: [644, 42, 38, 38]
            category-namespace-shop_and_service: [644, 42, 38, 38]
            category-predicate-shop: [644, 42, 38, 38]
            ruin: [584, 0, 38, 38]
            ruins: [584, 0, 38, 38]
            archaeological_site: [584, 0, 38, 38]
            school: [598, 84, 38, 38]
            kindergarten: [598, 84, 38, 38]
            category-namespace-education_and_religion: [598, 84, 38, 38]
            category-predicate-education: [598, 84, 38, 38]
            scuba_diving: [92, 294, 38, 38]
            dive_centre: [92, 294, 38, 38]
            sdk_shield-1char: [0, 758, 84, 84]
            sdk_shield-2char: [92, 758, 112, 84]
            sdk_shield-3char: [212, 758, 144, 84]
            sdk_shield-4char: [364, 758, 168, 84]
            sdk_shield-5char: [540, 758, 192, 84]
            shoemaker: [598, 42, 38, 38]
            shower: [230, 252, 38, 38]
            ski: [414, 126, 38, 38]
            winter_sports: [414, 126, 38, 38]
            ski_rental: [414, 126, 38, 38]
            ski_school: [414, 126, 38, 38]
            ski_jumping: [414, 126, 38, 38]
            skiing: [414, 126, 38, 38]
            slipway: [184, 252, 38, 38]
            soccer: [414, 84, 38, 38]
            sports: [276, 168, 38, 38]
            pitch: [276, 168, 38, 38]
            sports_centre: [276, 168, 38, 38]
            recreation_ground: [276, 168, 38, 38]
            spring: [368, 84, 38, 38]
            stadium: [506, 126, 38, 38]
            subway_entrance: [538, 0, 38, 38]
            summer_camp: [828, 252, 38, 38]
            supermarket: [644, 126, 38, 38]
            greengrocer: [644, 126, 38, 38]
            swimming_area: [368, 252, 38, 38]
            swimming_pool: [552, 126, 38, 38]
            tailor: [46, 42, 38, 38]
            telescope: [966, 252, 38, 38]
            tennis: [460, 126, 38, 38]
            theatre: [686, 168, 38, 38]
            category-predicate-fun: [686, 168, 38, 38]
            theme_park: [46, 126, 38, 38]
            amusement_ride: [46, 126, 38, 38]
            toilets: [920, 84, 38, 38]
            townspot-l: [132, 338, 32, 32]
            townspot-l-rev: [942, 296, 32, 32]
            townspot-m: [100, 338, 24, 24]
            townspot-m-rev: [910, 296, 24, 24]
            townspot-s: [72, 338, 20, 20]
            townspot-s-rev: [882, 296, 20, 20]
            townspot-xl: [172, 338, 40, 40]
            townspot-xl-rev: [0, 340, 40, 40]
            townspot-xs: [48, 338, 16, 16]
            townspot-xs-rev: [862, 296, 12, 12]
            toys: [0, 42, 38, 38]
            traffic_signals: [414, 210, 38, 38]
            trailhead: [184, 294, 38, 38]
            train_station: [492, 0, 38, 38]
            station: [492, 0, 38, 38]
            category-predicate-transport: [492, 0, 38, 38]
            tree: [230, 294, 38, 38]
            tree-s: [276, 294, 38, 38]
            ux-current-location: [674, 338, 88, 88]
            ux-locate-off: [300, 338, 72, 72]
            ux-locate-on: [220, 338, 72, 72]
            ux-route-arrow: [380, 338, 128, 128]
            ux-route-start: [594, 338, 72, 92]
            ux-route-stop: [516, 338, 72, 92]
            ux-search-active: [768, 338, 72, 108]
            ux-search-inactive: [848, 338, 72, 108]
            ux-transit-stop: [766, 296, 42, 36]
            veterinary: [136, 0, 38, 38]
            viewpoint: [184, 210, 38, 38]
            category-namespace-do_and_see: [184, 210, 38, 38]
            category-predicate-attraction: [184, 210, 38, 38]
            vineyard: [138, 168, 38, 38]
            volcano: [184, 84, 38, 38]
            water_park: [92, 252, 38, 38]
            water_slide: [92, 252, 38, 38]
            water_tower: [736, 252, 38, 38]
            waterfall: [506, 252, 38, 38]
            wine: [688, 210, 38, 38]
            winery: [548, 168, 38, 38]
            zoo: [0, 126, 38, 38]

sources:
    nextzen:
        type: MVT
        url: https://{s}.tiles.nextzen.org/tilezen/vector/v1/256/all/{z}/{x}/{y}.mvt
        url_params:
            api_key: global.sdk_mapzen_api_key
        url_subdomains: [a,b,c,d]
        rasters: [normals]
        max_zoom: 16
    normals: # terrain
        type: Raster
        url: https://elevation-tiles-prod.s3.amazonaws.com/normal/{z}/{x}/{y}.png
        max_zoom: 15
    mexican_states:
        type: GeoJSON
        url: data/mexican_states.json
    us_counties:
        type: GeoJSON
        url: data/us_counties.json
    la_hoods:
        type: GeoJSON
        url: data/la_hoods.json

styles:
    highlight:
        base: lines
    dots-lines:
        base: lines
        lighting: false
        texcoords: true
        blend: overlay
        shaders:
            defines:
                dotSize: .1
            blocks:
                color: |
                    vec2 st = fract(v_texcoord.xy);
                    st -= .5;
                    color.a = 1.- step(dotSize, dot(st,st)*2.);
    dashed-lines:
        base: lines
        dash: [1,1]
    fat-thin-dash:
        base: lines
        dash: [.2,1]
    dashed:
        base: lines
        dash: [2.25, 1.25]
        dash_background_color: [0.808,0.860,0.851]
    dashed_steps:
        base: lines
        dash: [0.5, 0.25]
        dash_background_color: [0.760,0.785,0.805]
    dashed_small:
        base: lines
        dash: [0.5, 0.5]
        dash_background_color: [0.867, 0.867, 0.867]
    dashed_big:
        base: lines
        dash: [2.0, 1.0]
        dash_background_color: [0.808,0.860,0.851]
    dashed_tunnel:
        base: lines
        dash: [5, 3]
        #dash_background_color: red
    long-dash:
        base: lines
        dash: [10,1]
    terrain:
        base: polygons
        lighting: false
        raster: normal
        order: 0
        shaders:
            uniforms:
                # u_envmap: images/relief-shading-environment-map.jpg
                u_envmap: images/draw-test9-light.jpg
                # u_envmap: https://raw.githubusercontent.com/tangrams/walkabout-style/gh-pages/images/draw-test10.jpg
                u_contrast: 1.
                u_brightness: 1.
            blocks:
                global: |
                    // Simplified view-independent environment map
                    vec4 terrainEnvmap (in sampler2D _tex, in vec3 _normal) {
                        const vec3 eye = vec3(0.,0.,-1.);
                        vec3 r = reflect(eye, _normal);
                        r.z += 1.;
                        float m = 2. * length(r);
                        vec2 uv = r.xy / m + .5;
                        return texture2D(_tex, uv);
                    }
                    const float e = 2.71828;
                color: |
                    // scale up normals with a function
                    // https://www.desmos.com/calculator/bv4mzh8erz
                    //float scale = 10./(u_map_position.z-.7) + 1.8;
                    float scale1 = 20./(u_map_position.z) + 1.5;
                    normal.z /= scale1; // turn terrain exaggeration up/down
                    // fade out spheremap normals with a function
                    // https://www.desmos.com/calculator/ptgkzcnfyc
                    float m = 3.5 * (u_map_position.z - 0.8) * pow(e, u_map_position.z * -.29);
                    m = clamp(m, 0., 1.5);
                    color = terrainEnvmap(u_envmap, normal);

                    // Apply contrast
                    float contrast = m;
                    color.rgb = ((color.rgb - 0.5) * max(contrast, 0.)) + 0.5;
                    // Apply brightness
                    float brightness = .5 - m * .5;
                    color.rgb += brightness;

                    color *= v_color; // apply layer color


    # HSV/RGB functions
    hsv:
        shaders:
            blocks:
                global: |
                    vec3 rgb2hsv(vec3 c)
                    {
                        vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
                        vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));
                        vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));
                        float d = q.x - min(q.w, q.y);
                        float e = 1.0e-10;
                        return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
                    }
                    vec3 hsv2rgb(vec3 c)
                    {
                        vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
                        vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
                        return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
                    }

    scale-buildings:
        shaders:
            blocks:
                position: |
                    // scale buildings based on zoom
                    float zoom = u_map_position.z;
                    float min = .1;       // minimum building scale
                    float midpoint = 16.; // middle of zoom range
                    float inspeed = .1;   // number of zooms to scale buildings up
                    float outspeed = 2.;  // number of zooms to scale buildings back down
                    float e = 0.;

                    if (zoom >= midpoint) {
                        e = (zoom - midpoint) / (outspeed * .2);
                    } else {
                        e = abs(zoom - midpoint) / inspeed;
                    }
                    position.z *= ((1. - min) / (1. + (exp(e)))) + min;


    icons:
        base: points
        texture: pois
        blend_order: 1
    text-blend-order:
        base: text
        blend_order: 1
    lines_transparent:
        base: lines
        blend: overlay
    polygons_transparent:
        base: polygons
        blend: overlay
    ux-route-line-overlay:
        base: lines
        blend: overlay
        blend_order: 0
    ux-route-line-dash-overlay:
        base: lines
        blend: overlay
        blend_order: 0
        dash: [2, 1]
    ux-transit-line-overlay:
        base: lines
        blend: overlay
        blend_order: 0
    ux-location-gem-overlay:
        base: points
        texture: pois
        interactive: global.interactive
        blend: overlay
        blend_order: 2
    ux-icons-overlay:
        base: points
        texture: pois
        interactive: global.interactive
        blend: overlay
        blend_order: 3
    sdk-point-overlay:
        base: points
        texture: pois
        interactive: global.interactive
        blend: overlay
        blend_order: 3
    sdk-shield-overlay:
        base: points
        texture: pois
        interactive: global.interactive
        blend: overlay
        blend_order: 3
    sdk-line-overlay:
        base: lines
        blend: overlay
        blend_order: 0
    sdk-polygon-overlay:
        base: polygons
        blend: overlay
        blend_order: 0

layers:
    # Map overlays for styling the server response (using special source layer names) for route line, current location, and search result pins
    mz_route_line:
        data: { source: mz_route_line }
        draw:
            ux-route-line-overlay:
                color: '#06a6d4'
                order: 500
                width: [[0,3.5px],[5,5px],[9,7px],[10,6px],[11,6px],[13,8px],[14,9px],[15,10px],[16,11px],[17,12px],[18,10px]]
    mz_route_line_dash:
        data: { source: mz_dash_line }
        draw:
            ux-route-line-dash-overlay:
                color: '#06a6d4'
                order: 500
                width: [[2,2px],[5,2.5px],[11,3px],[16,7px],[17,9px]]
    mz_route_line_transit:
        data: { source: mz_route_line_transit }
        draw:
            ux-transit-line-overlay:
                # each transit route segment could be a different "line" each with it's own color
                # but some transit lines don't define a color, in those cases default to blue
                # and since the color is coming from Transit.land they call it "color" instead of "colour"
                color: function() { return feature.color || '#06a6d4'; }
                order: 500
                width: [[0,3.5px],[5,5px],[9,7px],[10,6px],[11,6px],[13,8px],[14,9px],[15,10px],[16,11px],[17,12px],[18,10px]]


    mz_current_location_gem:
        data: { source: mz_current_location }
        draw:
            ux-location-gem-overlay:
                sprite: ux-current-location
                size: 36px
                collide: false
                transition: { show: { time: 0s }, hide: { time: 0s } }
    mz_route_location:
        data: { source: mz_route_location }
        draw:
            ux-location-gem-overlay:
                sprite: ux-route-arrow
                size: [60px,60px]
                collide: false
                transition: { show: { time: 0s }, hide: { time: 0s } }
    mz_route_start:
        data: { source: mz_route_start }
        draw:
            ux-icons-overlay:
                interactive: global.interactive
                priority: 1
                sprite: ux-route-start
                size: [36px,46px]
                collide: false
                anchor: top
                transition: { show: { time: 0s }, hide: { time: 0s } }
    mz_route_destination:
        data: { source: mz_route_destination }
        draw:
            ux-icons-overlay:
                interactive: global.interactive
                priority: 1
                sprite: ux-route-stop
                size: [36px,46px]
                collide: false
                anchor: top
                transition: { show: { time: 0s }, hide: { time: 0s } }

    # Used by the SDK to place point, line, and polygon overlays on the map
    mz_default_point:
        data: { source: mz_default_point }
        draw:
            sdk-point-overlay:
                interactive: global.interactive
                sprite: ux-search-active
                size: [36px,54px]
                collide: false
                anchor: top
                transition: { show: { time: 0s }, hide: { time: 0s } }
    mz_default_shield:
        data: { source: mz_default_shield }
        draw:
            sdk-shield-overlay:
                interactive: global.interactive
                sprite: |
                    function() {
                        if( feature.shield_text ) {
                            return ('sdk_shield-' + feature.shield_text.length + 'char');
                        } else {
                            return ('sdk_shield-' + feature.name.length + 'char');
                        }
                    }
                sprite_default: sdk_shield-1char
                color: global.sdk_shield_color
                collide: false
                transition: { show: { time: 0s }, hide: { time: 0s } }
                text:
                    # offset: [0px, -1px]
                    text_source: |
                        function() {
                            if( feature.shield_text ) {
                                return feature.shield_text;
                            } else {
                                return feature.name;
                            }
                        }
                    anchor: center
                    font:
                        family: Montserrat
                        fill: global.sdk_shield_text_color
                        style: bold
                        size: [[7,7px],[12,8px],[16,11px]]

        width_1char:
            filter: |
                function() {
                    if( feature.shield_text ) {
                        return (feature.shield_text.length === 1);
                    } else {
                        return (feature.name.length === 1);
                    }
                }
            draw:
                sdk-shield-overlay:
                    size: [[6,[16px,16px]],[13,[18px,18px]],[16,[21px,21px]]]
        width_2char:
            filter: |
                function() {
                    if( feature.shield_text ) {
                        return (feature.shield_text.length === 2);
                    } else {
                        return (feature.name.length === 2);
                    }
                }
            draw:
                sdk-shield-overlay:
                    size: [[6,[21px,16px]],[13,[24px,18px]],[16,[28px,21px]]]
        width_3char:
            filter: |
                function() {
                    if( feature.shield_text ) {
                        return (feature.shield_text.length === 3);
                    } else {
                        return (feature.name.length === 3);
                    }
                }
            draw:
                sdk-shield-overlay:
                    size: [[6,[27px,16px]],[13,[31px,18px]],[16,[36px,21px]]]
        width_4char:
            filter: |
                function() {
                    if( feature.shield_text ) {
                        return (feature.shield_text.length === 4);
                    } else {
                        return (feature.name.length === 4);
                    }
                }
            draw:
                sdk-shield-overlay:
                    size: [[6,[32px,16px]],[13,[36px,18px]],[16,[41px,21px]]]
        width_5char:
            filter: |
                function() {
                    if( feature.shield_text ) {
                        return (feature.shield_text.length === 5);
                    } else {
                        return (feature.name.length === 5);
                    }
                }
            draw:
                sdk-shield-overlay:
                    size: [[6,[37px,16px]],[13,[41px,18px]],[16,[48px,21px]]]
        # this is kinda a hack
        width_longggggg:
            filter: |
                function() {
                    if( feature.shield_text ) {
                        return (feature.shield_text.length > 5);
                    } else {
                        return (feature.name.length > 5);
                    }
                }
            draw:
                sdk-shield-overlay:
                    visible: false
    mz_default_line:
        data: { source: mz_default_line }
        draw:
            sdk-line-overlay:
                color: '#06a6d4'
                order: 503
                width: 3px
    mz_default_polygon:
        data: { source: mz_default_polygon }
        draw:
            sdk-polygon-overlay:
                color: [0.02,0.65,0.82,0.5]  #'#06b1e2'
                order: 501
            sdk-line-overlay:
                color: '#06a6d4'
                order: 502
                width: 0px

    # Basemap styling
    earth:
        data: { source: nextzen}
        draw:
            terrain:
                visible: false
                order: 0
                color: global.background
            polygons:
                visible: true
                order: 0
                color: global.background
    water:
        data: { source: nextzen, layer: water }
        filter: { not: { kind: [swimming_pool] } }
        draw:
            polygons:
                order: function() { return feature.sort_rank; }
                visible: global.water_visible_ocean
                color: global.water
        later:
            filter: { $zoom: { min: 12 } }
            draw:
                polygons:
                    order: function() { return feature.sort_rank + 1; }
                    # color: global.water

        lakes:
            filter:
                all:
                    - kind: [ocean, lake, water, riverbank, reservoir]
                # WARNING: any area filters here must match the area filters in the water_boundaries-not-ocean layer
                any:
                    # limit show smaller landuse areas to higher zooms
                    - { $zoom: { min: 0 },  area: { min: 40000000000 } }
                    - { $zoom: { min: 2 },  area: { min: 20000000000 } }
                    # some weird natural earth scale set transition
                    - { $zoom: { min: 3 },  area: { min: 80000000000 } }
                    - { $zoom: { min: 4 },  area: { min: 5000000000 } }
                    - { $zoom: { min: 5 },  area: { min: 700000000 } }
                    - { $zoom: { min: 6 },  area: { min: 500000000 } }
                    - { $zoom: { min: 7 },  area: { min: 160000000 } }
                    - { $zoom: { min: 8 },  area: { min: 40000000 } }
                    - { $zoom: { min: 9 },  area: { min: 10000000 } }
                    - { $zoom: { min: 10 }, area: { min: 8000000 } }
                    - { $zoom: { min: 11 }, area: { min: 2000000 } }
                    - { $zoom: { min: 12 }, area: { min: 200000 } }
                    - { $zoom: { min: 13 }, area: { min: 100000 } }
                    - { $zoom: { min: 14 }, area: { min: 2000 } }
                    - { $zoom: { min: 15 } }
            draw:
                polygons:
                    color: global.water
        inland-water:
            filter: {not: { kind: ocean} }
            draw:
                polygons:
                    color: global.water
                    visible: global.water_visible_inland_water
        other-water-areas:
            filter: { not: { kind: [ocean, lake, water, reservoir, playa] }, $zoom: { min: 11 }, area: { min: 100 } }
            draw:
                polygons:
                    color: global.water
        river:
            #river center lines, not boundaries for polygons
            filter: { kind: [river], $zoom: { min: 11 }, not: { is_tunnel: true } }
            draw:
                lines:
                    order: function() { return feature.sort_rank; }
                    color: global.water
                    width: [[10,0px],[11,1px],[12,1.5px],[13,1.75px],[14,2.25px],[15,3px],[16,4px],[17,5m]]
                    cap: round
                    outline:
                        width: [[9,0px],[11,0px],[12,0px],[13,0.5px],[14,0.75px],[15,0.75px],[16,0.75px],[17,1px]]
        streams:
            filter: { kind: [canal,stream,dam,ditch,drain], $zoom: { min: 11 }, not: { intermittent: true } }
            draw:
                lines:
                    order: function() { return feature.sort_rank; }
                    color: global.water
                    width: [[10,0px],[11,1px],[12,1.5px],[13,1.75px],[14,2.25px],[15,3px],[16,4px],[17,5m]]
                    cap: round
                    outline:
                        width: [[9,0px],[11,0px],[12,0px],[13,0.5px],[14,0.75px],[15,0.75px],[16,0.75px],[17,1px]]
    swimming-pools:
        data: { source: nextzen, layer: water }
        filter: { kind:[swimming_pool], $zoom: { min: 16 } }
        draw:
            polygons:
                visible: global.water_visible_swimming_pools
                order: function() { return feature.sort_rank; }
                color: global.water

    water-line-labels:
        data: { source: nextzen, layer: water }
        visible: global.labels_visible_water
        filter:
            all:
                - name: true
                - $geometry: line
                - kind: [river,canal,stream,dam,ditch,drain]
                - $zoom: { min: 11 }
        draw:
            text-blend-order:
                text_source: global.ux_language_text_source
                font:
                    fill: global.text_water
                    family: global.text_font_family
                    style: italic
                    weight: normal
                    size: [[12,24px],[17,28px]]
        not-river-not-stream:
            filter: { kind: [canal,dam,ditch,drain], $zoom: { max: 14 } }
            draw:
                text-blend-order:
                    visible: false
        stream:
            filter: { kind: [stream], $zoom: { max: 14 } }
            draw:
                text-blend-order:
                    visible: false

#Jon's transit styles
    transit:
        data: { source: nextzen , layer: transit }
        filter: {not:{ kind: [platform]}, $zoom: { min: 11 }}
        draw:
            lines:
                # interactive: true
                order: function() { return feature.sort_rank || 275; }
        railway:
            visible: global.rail_visible
            filter: { kind: [railway, train]}
            draw:
                fat-thin-dash:
                    order: function() { return feature.sort_rank; }
                    color: global.rail_line
                    width: [[15,5px],[16,6px]]
                lines:
                    color: global.rail_line
                    width: [[15,2px],[16,3px]]
        light_rail:
            visible: global.transit_visible
            filter: { kind: [light_rail,tram, subway], $zoom: { min: 11 }}
            draw:
                lines:
                    color: function() {
                        if(feature.ref == '806') { return '#A4BED7';}
                        else if (feature.ref == '801') { return '#6B9CC2'; }
                        else if (feature.ref == '804') { return '#FADA85'; }
                        else if (feature.ref == '803') { return '#759371'; }
                        else if (feature.ref == '805') { return '#BCADD0'; }
                        else if (feature.ref == '802') { return '#DD9894'; }
                        else { return feature.colour; } }
                    width: [[11, 5px],[15, 3.5px ],[18, 5m]]
                    cap: round
                    z: function() { if(feature.colour == 'purple') { return 1;} else if (feature.colour == 'red') { return 2; } }

    transit-overlay-station-labels:
        visible: global.transit_visible
        data: { source: nextzen, layer: [pois] }
        station-train-subway:
            filter: { kind: [station, train-station, train_station], $zoom: { min: 11 } }
            stations:
                draw:
                    points:
                        collide: false
                        size: [[11,14px],[15,20px],[18,40m],[19,70m]]
                        color: function() { if (feature.name == 'Universal City') { return '#DD9894'; } else if (feature.name == '1st Street') { return '#6B9CC2'; } else if (feature.name == 'Downtown Long Beach') { return '#6B9CC2'; } else if (feature.name == '5th Street') { return '#6B9CC2'; } else if (feature.name == 'Anaheim Street') { return '#6B9CC2'; } else if (feature.name == 'Vermont/Beverly') { return '#DD9894'; } else if (feature.name == 'Vermont/Santa Monica') { return '#DD9894'; } else if (feature.name == 'Hollywood/Western') { return '#DD9894'; } else if (feature.name == 'Wilshire/Normandie') { return '#BCADD0'; } else if (feature.name == 'Wilshire/Western') { return '#BCADD0'; } else if (feature.name == 'Hollywood/Highland') { return '#DD9894'; } else if (feature.name == 'Hollywood/Vine') { return '#DD9894'; } else if (feature.name == 'Westlake/MacArthur Park') { return '#DD9894'; } else if (feature.name == 'Memorial Park') { return '#FFD700'; } else if (feature.name == 'Arcadia') { return '#FFD700'; } else if (feature.name == 'La Cienega/Jefferson') { return '#A4BED7'; } else if (feature.name == 'Civic Center/Grand Park') { return '#DD9894'; } else if (feature.name == 'Pershing Square') { return '#DD9894'; } else if (feature.name == '7th Street/Metro Center') { return '#DD9894'; } else if (feature.name == 'Los Angeles Union Station') { return '#DD9894'; } else if (feature.name == 'Wilshire/Vermont') { return '#DD9894'; } else if (feature.name == 'Sierra Madre Villa') { return '#FFD700'; } else if (feature.name == 'Little Tokyo/Arts District') { return '#FFD700'; } else if (feature.name == 'Pico/Aliso') { return '#FFD700'; } else if (feature.name == 'Mariachi Plaza') { return '#FFD700'; } else if (feature.name == 'Soto') { return '#FFD700'; } else if (feature.name == 'East Los Angeles Civic Center') { return '#FFD700'; } else if (feature.name == 'Atlantic') { return '#FFD700'; } else if (feature.name == 'Mariposa') { return '#759371'; } else if (feature.name == 'El Segundo') { return '#759371'; } else if (feature.name == 'Redondo Beach') { return '#759371'; } else if (feature.name == 'Chinatown') { return '#FFD700'; } else if (feature.name == 'Lincoln/Cypress') { return '#FFD700'; } else if (feature.name == 'Heritage Square') { return '#FFD700'; } else if (feature.name == 'Southwest Museum') { return '#FFD700'; } else if (feature.name == 'Vermont/Athens') { return '#759371'; } else if (feature.name == 'Avalon') { return '#759371'; } else if (feature.name == 'Lake') { return '#FFD700'; } else if (feature.name == 'Allen') { return '#FFD700'; } else if (feature.name == 'Lake') { return '#FFD700'; } else if (feature.name == 'Del Mar') { return '#FFD700'; } else if (feature.name == 'Fillmore') { return '#FFD700'; } else if (feature.name == 'South Pasadena') { return '#FFD700'; } else if (feature.name == 'North Hollywood') { return '#DD9894'; } else if (feature.name == 'Westwood/Rancho Park') { return '#A4BED7'; } else if (feature.name == 'Lakewood Boulevard') { return '#759371'; } else if (feature.name == 'Vermont/Sunset') { return '#DD9894'; } else if (feature.name == 'Highland Park') { return '#FFD700'; } else if (feature.name == 'Indiana') { return '#FFD700'; } else if (feature.name == 'Maravilla') { return '#FFD700'; } else if (feature.name == 'Palms') { return '#A4BED7'; } else if (feature.name == 'Expo/La Brea') { return '#A4BED7'; } else if (feature.name == 'Culver City') { return '#A4BED7'; } else if (feature.name == '26th Street/Bergamot') { return '#A4BED7'; } else if (feature.name == 'Douglas') { return '#759371'; } else if (feature.name == 'Crenshaw') { return '#759371'; } else if (feature.name == 'Hawthorne/Lennox') { return '#759371'; } else if (feature.name == 'Aviation/LAX') { return '#759371'; } else if (feature.name == 'San Pedro Street') { return '#6B9CC2'; } else if (feature.name == 'Grand') { return '#6B9CC2'; } else if (feature.name == 'Downtown Santa Monica') { return '#A4BED7'; } else if (feature.name == 'Lakewood Boulevard') { return '#759371'; } else if (feature.name == 'Long Beach Boulevard') { return '#759371'; } else if (feature.name == 'Pacific Avenue') { return '#6B9CC2'; } else if (feature.name == 'Jefferson / USC') { return '#A4BED7'; } else if (feature.name == 'LATTC/Ortho Institute') { return '#A4BED7'; } else if (feature.name == 'Expo Park/USC') { return '#A4BED7'; } else if (feature.name == 'Harbor Freeway') { return '#759371'; } else if (feature.name == 'Norwalk') { return '#759371'; } else if (feature.name == 'Willowbrook/Rosa Parks') { return '#6B9CC2'; } else if (feature.name == 'Pacific Coast highway') { return '#6B9CC2'; } else if (feature.name == 'Willow Street') { return '#6B9CC2'; } else if (feature.name == 'Wardlow') { return '#6B9CC2'; } else if (feature.name == 'Del Amo') { return '#6B9CC2'; } else if (feature.name == 'Artesia') { return '#6B9CC2'; } else if (feature.name == 'Compton') { return '#6B9CC2'; } else if (feature.name == '103rd Street/Watts Towers') { return '#6B9CC2'; } else if (feature.name == 'Firestone') { return '#6B9CC2'; } else if (feature.name == 'Florence') { return '#6B9CC2'; } else if (feature.name == 'Slauson') { return '#6B9CC2'; } else if (feature.name == 'Vernon') { return '#6B9CC2'; } else if (feature.name == 'Washington') { return '#6B9CC2'; } else if (feature.name == 'Pico') { return '#6B9CC2'; } else if (feature.name == '17th Street/SMC') { return '#A4BED7'; } else if (feature.name == 'Duarte/City of Hope') { return '#FFD700'; } else if (feature.name == 'Azusa Downtown') { return '#FFD700'; } else if (feature.name == 'Irwindale') { return '#FFD700'; } else if (feature.name == 'APU/Citrus College') { return '#FFD700'; } else if (feature.name == 'Expo/Sepulveda') { return '#A4BED7'; } else if (feature.name == 'Expo/Bundy') { return '#A4BED7'; } else if (feature.name == 'Monrovia') { return '#FFD700'; } else if (feature.name == 'Expo/Western') { return '#A4BED7'; } else if (feature.name == 'Expo/Crenshaw') { return '#A4BED7'; } else if (feature.name == 'Expo/Vermont') { return '#A4BED7'; } else if (feature.name == 'Farmdale') { return '#A4BED7'; } else { return '#c8c8c1'; } }
                        outline:
                            color: global.background
                            width: 2px
            bridges-tunnels:
                filter: { any: [is_bridge: true, is_tunnel: true] }
                draw:
                    lines:
                        outline:
                            # except bridges and tunnels, their outlines should also self-sort
                            order: function() { return feature.sort_rank || 305; }

# roads
    roads:
        data: { source: nextzen, layer: roads }
        filter: { not: { kind: rail } }
        draw:
            lines:
                width: 1px
                order: function() { return feature.sort_rank; }
            text-blend-order:
                visible: false
                text_source: global.ux_language_text_source
                font:
                    family: global.text_font_family
                    weight: normal
                    fill: global.text_fill
        early:
            filter: { $zoom: { max: 14 } }
            draw:
                lines:
                    outline:
                        order: function() { return feature.sort_rank; }
        bridges-tunnels:
            filter: { any: [is_bridge: true, is_tunnel: true] }
            draw:
                lines:
                    outline:
                        # except bridges and tunnels, their outlines should also self-sort
                        order: function() { return feature.sort_rank; }
        natural_earth_highways:
            filter: { source: 'naturalearthdata.com', $zoom: { max: 8 } }
            draw:
                lines:
                    visible: global.roads_visible_major
                    color: global.road_color
                    width: [[1,0px],[7, 1px],[8,1.75px]]
            major_road:
                filter: { kind: major_road }
                draw:
                    lines:
                        visible: global.roads_visible_major
                        color: global.road_color
                        width: [[7, 0.5px], [8, 0.5px]]
            ferry:
                filter: { kind: ferry }
                draw:
                    lines:
                        color: global.ferry_route
                        width: 0.5px
                        outline:
                            width: 0px
        highway:
            filter: { kind: highway, $zoom: { min: 8 } }
            draw:
                lines:
                    visible: global.roads_visible_highways
                    color: global.road_color
                    width: [[9, 2px], [10, 3px], [12, 4px],[13, 6.6px],[16, 15px], [17, 20m]]
                    cap: round
                    join: round
            link:
                filter: { is_link: true }
                draw:
                    lines:
                        visible: global.roads_visible_highway_ramps
                        color: global.road_color
                        width: [[10, 0px], [11, 1px], [12, 1px], [13, 2px], [14, 4px], [17, 4m]]
                early_link:
                    filter: { $zoom: { max: 15 } }
                    draw:
                        lines:
                            order: 352
                    z12-13:
                        filter: { $zoom: { max: 14 } }
                        draw:
                            lines:
                                order: 351
                tunnel-link:
                    filter: { is_tunnel: true, $zoom: { min: 13 } }
                    draw:
                        lines:
                            color: global.minor_road
                            outline:
                                color: global.road_color
            tunnel:
                filter: { is_tunnel: true, $zoom: { min: 13 } }
                draw:
                    lines:
                        cap: [[14,butt],[15,butt]]
                        color: global.minor_road
                        outline:
                            color: global.road_color
            highway_bridge:
                filter: { is_bridge: true }
                draw:
                    lines:
                        order: 492
                        cap: round
                        outline:
                            cap: butt
        major_road:
            filter: { kind: major_road }
            # default style
            draw:
                lines:
                    visible: global.roads_visible_major
                    color: global.road_color
                    width: [[8, 0.5px], [10, 0.5px], [11, 0.8px], [12, 1px], [14, 2.6px], [16, 6m]]
            trunk_primary:
                filter: { kind_detail: [trunk, primary] }
                draw:
                    lines:
                        visible: global.roads_visible_major
                        color: global.road_color
                        width: [[8, 0.5px], [10, 0.5px], [11, 0.8px], [12, 1px], [14, 2.6px], [16, 6m]]
                routes:
                    filter: { ref: true }
                    draw:
                        lines:
                            visible: global.roads_visible_major
                            color: global.road_color
                            width: [[8, 1px], [10, 1px], [11, 1.5px], [12, 2.5px], [14, 6px], [16, 6m]]
                    tunnel:
                        filter: { is_tunnel: true, $zoom: { min: 13 } }
                        draw:
                            lines:
                                visible: global.roads_visible_major
                                color: global.minor_road
                                outline:
                                    color: global.road_color
                    labels-trunk_primary-route:
                        filter: { $zoom: { min: 14 } }
                        draw:
                            text-blend-order:
                                priority: 51
                                offset: [0px, -20px]
                                visible: global.labels_visible_major_roads
                                repeat_distance: 200px
                                font:
                                    fill: global.road_text
                                    weight: normal
                                    size: [[14, 28px],[15, 30px]]
                                    stroke: { color: [[14, global.text_stroke], [15,[0.969,0.973,0.973]]], width: [[15, 3px], [16, 4px]] }
                        z14:
                            filter: { $zoom: [14] }
                            draw:
                                text-blend-order:
                                    repeat_distance: 200px
                                    visible: global.labels_visible_major_roads
                                    font:
                                        weight: normal  # or 500 or 400?
                labels-trunk_primary-z12-up:
                    filter:
                        $zoom: { min: 12 }
                    draw:
                        text-blend-order:
                            priority: 51
                            offset: [0px, -20px]
                            repeat_distance: 200px
                            visible: global.labels_visible_major_roads
                            font:
                                fill: global.road_text
                                size: [[12, 28px],[15, 30px]]
                                stroke: { color: global.text_stroke, width: 3px }
                    z16:
                        filter: { $zoom: [16] }
                        draw:
                            text-blend-order:
                                offset: [0px, -20px]
                                repeat_distance: 200px
                                visible: global.labels_visible_major_roads
                                font:
                                    weight: normal
            link:
                filter: { is_link: true } # on- and off-ramps, etc
                draw:
                    lines:
                        visible: global.roads_visible_major
                        color: global.road_color
                        width: [[10, 0px], [11, 1px], [12, 1px], [13, 2px], [14, 4px], [17, 4m]]
                early_link:
                    filter: { $zoom: { max: 14 } }
                    draw:
                        lines:
                            order: 351
            tunnel:
                filter: { is_tunnel: true, $zoom: { min: 13 } }
                draw:
                    lines:
                        visible: global.roads_visible_major
                        color: global.minor_road
                        outline:
                            color: global.road_color
            secondary:
                filter: { kind_detail: secondary }
                draw:
                    lines:
                        visible: global.roads_visible_major
                        color: global.road_color
                        width: [[8, 0.5px], [10, 0.5px], [11, 0.8px], [12, 1px], [14, 2.6px], [16, 6m]]
                routes:
                    filter: { ref: true, $zoom: { min: 8 } }
                    draw:
                        lines:
                            visible: global.roads_visible_major
                            color: global.road_color
                            width: [[8, 0.5px], [10, 0.5px], [11, 0.8px], [12, 1px], [14, 2.6px], [16, 6m]]
                    tunnel:
                        filter: { is_tunnel: true, $zoom: { min: 13 } }
                        draw:
                            lines:
                                visible: global.roads_visible_major
                                color: global.minor_road
                                outline:
                                    color: global.road_color
                    labels-secondary-routes-z13-up:
                        filter: { $zoom: { min: 13 } }
                        draw:
                            text-blend-order:
                                offset: [0px, -20px]
                                priority: 56
                                visible: global.labels_visible_major_roads
                                font:
                                    fill: global.road_text
                                    size: [[12, 28px],[15, 30px]]
                                    stroke: { color: global.text_stroke, width: 3px }
                labels-secondary:
                    filter:
                        $zoom: { min: 13 }
                    draw:
                        text-blend-order:
                            priority: 56
                            offset: [0px, -20px]
                            visible: global.labels_visible_major_roads
                            font:
                                fill: global.road_text
                                size: [[12, 28px],[15, 30px]]
                                stroke: { color: global.text_stroke, width: 3px }
            tertiary:
                filter: { kind_detail: [tertiary, tertiary_link] }
                draw:
                    lines:
                        visible: global.roads_visible_major
                        color: global.road_color
                        width: [[8, 0.5px], [10, 0.5px], [11, 0.8px], [12, 1px], [14, 2.2px], [16, 5m]]
                early:
                    filter: { $zoom: { max: 14 } }
                    draw:
                        lines:
                            visible: global.roads_visible_major
                            order: 352
                routes:
                    filter: { ref: true, $zoom: { min: 12 } }
                    draw:
                        lines:
                            visible: global.roads_visible_major
                            color: global.minor_road
                            width: [[12, 0px], [13, 0.3px], [14, 0.6px], [15, 1.8px], [16, 3m]]
                    early:
                        filter: { $zoom: { max: 14 } }
                        draw:
                            lines:
                                visible: global.roads_visible_major
                                order: function() { return feature.sort_rank + 3; }

                    tunnel:
                        filter: {is_tunnel: true, $zoom: { min: 13 } }
                        draw:
                            lines:
                                visible: global.roads_visible_major
                                color: global.minor_road
                                outline:
                                    color: global.road_color

                labels-tertiary:
                    filter:
                        $zoom: { min: 13 }
                    draw:
                        text-blend-order:
                            priority: 57
                            offset: [0px, -20px]
                            # repeat_distance: 400px
                            visible: global.labels_visible_minor_roads
                            font:
                                fill: global.road_text_minor
                                size: [[13, 26px], [15, 28px]]
                                stroke: { color: [[13, global.text_stroke], [15, [0.969,0.973,0.973]]], width: 4px }
        minor_road:
            filter: { kind: minor_road, not: { kind_detail: service }, $zoom: { min: 13 } }
            draw:
                lines:
                    visible: global.roads_visible_minor
                    color: global.minor_road
                    width: [[13, 0.3px], [14, 0.6px], [15, 1.8px], [16, 3m]]
            early:
                filter: { $zoom: { max: 14 } }
                draw:
                    lines:
                        order: 350



            # Is this junk code?
            round:
                filter: { $zoom: { min: 17 } }
                draw:
                    lines:
                        cap: round
                        join: round
            tunnel:
                filter: { is_tunnel: true, $zoom: { min: 13 } }
                draw:
                    lines:
                        cap: butt
                        color: global.minor_road
                        outline:
                            color: global.road_color
            minor_road_bridge:
                filter: { is_bridge: true }
                draw:
                    lines:
                        cap: butt
                        # outline:
                        #     cap: butt
            labels-minor_road:
                filter:
                    $zoom: { min: 15 }
                draw:
                    text-blend-order:
                        priority: 59
                        offset: [0px, -18px]
                        visible: global.labels_visible_minor_roads
                        font:
                            fill: global.road_text_minor
                            size: [[13, 26px], [15, 28px]]
                            # stroke: { color: [[15, global.text_stroke], [17,[0.969,0.973,0.973]]], width: 4px }
            early-residential:
                filter: { kind_detail: residential, $zoom: { max: 15 } }
                draw:
                    lines:
                        order: 300
        service_road:
            filter: { kind: minor_road, kind_detail: service, $zoom: { min: 16 } }
            draw:
                lines:
                    visible: global.roads_visible_service
                    color: global.minor_road
                    width: [[16, 1m], [17, 1.5m]]
            early:
                filter: { $zoom: { max: 16 } }
                draw:
                    lines:
                        order: 300
            #darken if on a land use color
            landuse_color_service:
                filter: { landuse_kind: [aerodrome, parking, university, beach], $zoom: { min: 16 } }
                draw:
                    lines:
                        color: global.aeroway
            park_color_service:
                filter: { landuse_kind: [park, national_park, conservation, protected_area, nature_reserve, forest, grass, battlefield], $zoom: { min: 16 } }
                draw:
                    lines:
                        color: global.minor_road
            labels-service_road:
                filter:
                    $zoom: { min: 17 }
                draw:
                    text-blend-order:
                        priority: 60
                        offset: [0px, -18px]
                        visible: global.labels_visible_service_roads
                        font:
                            fill: global.road_text_minor
                            size: [[13, 26px], [15, 28px]]


        shields:
            filter:
                $zoom: { min: 6 }
                any:
                    - shield_text: true    # some roads don't have shield text, deal with that later
                    - all:
                        - shield_text: false    # some roads don't have shield text, deal with that later
                        - ref: true
                        - kind_detail: [motorway, trunk, primary, secondary, tertiary]
            # default
            draw:
                icons:
                    # you need to match any custom shield to the vector tile `network` values
                    sprite: |
                        function() {
                            if( feature.shield_text ) {
                                return ('generic_shield-' + feature.shield_text.length + 'char');
                            } else {
                                return ('generic_shield-' + feature.ref.length + 'char');
                            }
                        }
                    sprite_default: generic_shield_5char
                    priority: 58
                    repeat_group: shields
                    repeat_distance: [[8,90px],[10,40px],[13,30px]]
                    placement: midpoint
                    placement_min_length_ratio:
                        - [8, 0.1]
                        - [9, 0.25]
                        - [10, 0.25]
                        - [11, 0.15]
                        - [12, 1]
                        - [13, 1.50]
                        - [14, 2.0]
                    cull_from_tile: true
                    visible: false
                    text:
                        offset: [0px, -0.5px]
                        repeat_distance: 200px
                        anchor: center
                        text_source: |
                            function() {
                                if( feature.shield_text ) {
                                    return feature.shield_text;
                                } else {
                                    return feature.ref;
                                }
                            }
                        font:
                            family: global.text_font_family
                            fill: global.road_text_minor
                            size: 22px

            default_priority_highway:
                filter:
                    all:
                        - kind_detail: motorway
                        - $zoom: { min: 9 }
                draw:
                    icons:
                        priority: 47
                        #color: yellow
                        visible: global.labels_visible_highway_shields

            default_priority_trunk:
                filter:
                    all:
                        - kind_detail: [trunk]
                        - $zoom: { min: 10 }
                draw:
                    icons:
                        priority: 48
                        #color: red
                        visible: global.labels_visible_highway_shields
            default_priority_primary:
                filter:
                    all:
                        - kind_detail: [primary]
                        - $zoom: { min: 12 }
                draw:
                    icons:
                        priority: 49
                        #color: aqua
                        visible: global.labels_visible_highway_shields
            default_priority_trunk_secondary:
                filter:
                    all:
                        - kind_detail: [secondary]
                        - $zoom: { min: 12 }
                draw:
                    icons:
                        priority: 53
                        #color: blue
                        visible: global.labels_visible_highway_shields
            default_priority_trunk_tertiary:
                filter:
                    all:
                        - kind_detail: tertiary
                        - $zoom: { min: 13 }
                draw:
                    icons:
                        priority: 55
                        #color: green
                        visible: global.labels_visible_highway_shields
            width_1char:
                filter: |
                    function() {
                        if( feature.shield_text ) {
                            return (feature.shield_text.length === 1)
                        } else {
                            return (feature.ref.length === 1)
                        }
                    }
                draw:
                    icons:
                        size: [[6,[34px,34px]],[8,[34px,34px]]]
            width_2char:
                filter: |
                    function() {
                        if( feature.shield_text ) {
                            return (feature.shield_text.length === 2)
                        } else {
                            return (feature.ref.length === 2)
                        }
                    }
                draw:
                    icons:
                        size: [[6,[44px,34px]],[8,[44px,34px]]]
            width_3char:
                filter: |
                    function() {
                        if( feature.shield_text ) {
                            return (feature.shield_text.length === 3)
                        } else {
                            return (feature.ref.length === 3)
                        }
                    }
                draw:
                    icons:
                        size: [[6,[54px,34px]],[8,[54px,34px]]]
            width_4char:
                filter: |
                    function() {
                        if( feature.shield_text ) {
                            return (feature.shield_text.length === 4)
                        } else {
                            return (feature.ref.length === 4)
                        }
                    }
                draw:
                    icons:
                        size: [[6,[70px,34px]],[8,[70px,34px]]]
                # London sucks
                early:
                    filter: { $zoom: { max: 14 } }
                    draw:
                        icons:
                            visible: false
            width_5char:
                filter: |
                    function() {
                        if( feature.shield_text ) {
                            return (feature.shield_text.length === 5)
                        } else {
                            return (feature.ref.length === 5)
                        }
                    }
                draw:
                    icons:
                        size: [[6,[80px,34px]],[8,[80px,34px]]]
                # London sucks
                early:
                    filter: { $zoom: { max: 14 } }
                    draw:
                        icons:
                            visible: false
            # this is kinda a hack
            width_longggggg:
                filter: |
                    function() {
                        if( feature.shield_text ) {
                            return (feature.shield_text.length > 5)
                        } else {
                            return (feature.ref.length > 5)
                        }
                    }
                draw:
                    icons:
                        visible: false
            # Now for the good stuff
            legit-shields:
                filter: { shield_text: true }
                # US Interstate roads
                US-I:
                    filter:
                        network: 'US:I'
                        $zoom: { min: 6 }
                    draw:
                        icons:
                            # you need to match any custom shield to the vector tile `network` values
                            sprite: function() { return (feature.network + '-' + feature.shield_text.length + 'char'); }
                            priority: 46
                            visible: global.labels_visible_highway_shields
                            text:
                                offset: [0px, -0.5px]
                                font:
                                    fill: global.road_text_minor
                                    size: [[6,20px],[8,22px]]
                    width_1char:
                        filter: function() { return (feature.shield_text.length === 1) } #US:I-2char
                        draw:
                            icons:
                                size: [[6,[36px,32px]],[8,[38px,34px]]] #width, height
                    width_2char:
                        filter: function() { return (feature.shield_text.length === 2) }
                        draw:
                            icons:
                                offset: [4px, 0px]
                                size: [[6,[48px,38px]],[8,[50px,38px]]]
                    width_3char:
                        filter: function() { return (feature.shield_text.length === 3) }
                        draw:
                            icons:
                                offset: [0px, -1px]
                                size: [[6,[60px,36px]],[8,[60px,38px]]]
                    width_4char:
                        filter: function() { return (feature.shield_text.length === 4) }
                        draw:
                            icons:
                                size: [[6,[34px,34px]],[8,[36px,38px]]]
                    width_5char:
                        filter: function() { return (feature.shield_text.length === 5) }
                        draw:
                            icons:
                                size: [[6,[34px,34px]],[8,[36px,38px]]]
                # US Federal Routes
                US-US:
                    filter:
                        network: ['US:US','US:US:Business', 'US:US:Truck', 'US:US:Alternate']
                        $zoom: { min: 7}
                    draw:
                        icons:
                            # you need to match any custom shield to the vector tile `network` values
                            sprite: |
                                function() { return ('US:US-' + feature.shield_text.length + 'char'); }
                            priority: 47
                            cull_from_tile: true
                            visible: global.labels_visible_highway_shields
                            text:
                                offset: [0px, -2px]
                                font:
                                    fill: global.road_text_minor
                                    size: 22px
                    width_1char:
                        filter: function() { return (feature.shield_text.length === 1) }
                        draw:
                            icons:
                                size: [[6,[36px,32px]],[8,[38px,34px]]]
                    width_2char:
                        filter: function() { return (feature.shield_text.length === 2) }
                        draw:
                            icons:
                                size: [[6,[44px,36px]],[8,[44px,34px]]]
                    width_3char:
                        filter: function() { return (feature.shield_text.length === 3) }
                        draw:
                            icons:
                                # offset: [0px, 1px]
                                size: [[6,[52px,32px]],[8,[54px,35px]],[18,[54px,35px]]]
                    width_4char:
                        filter: function() { return (feature.shield_text.length === 4) }
                        draw:
                            icons:
                                size: [[6,[25px,17px]],[13,[29px,19px]],[15,[39px,25px]]]
                    width_5char:
                        filter: function() { return (feature.shield_text.length === 5) }
                        draw:
                            icons:
                                size: [[6,[27px,17px]],[13,[30px,19px]],[15,[41px,25px]]]
                # US State Routes
                US-CA:
                    # Match California state highways: `US:CA`
                    filter: |
                        function() {
                            return feature.shield_text &&
                                /^US:CA$/.test(feature.network)
                        }
                    draw:
                        icons:
                            sprite: function() { return (feature.network + '-' + feature.shield_text.length + 'char'); }
                            visible: global.labels_visible_highway_shields
                            text:
                                offset: [0px, 0px]
                                font:
                                    fill: global.road_text_minor
                                    size: 22px
                    motorway:
                        filter: { kind_detail: [motorway], $zoom: [7,8] }
                        draw:
                            icons:
                                visible: global.labels_visible_highway_shields
                    trunk:
                        filter: { kind_detail: [trunk], $zoom: [8,9] }
                        draw:
                            icons:
                                visible: global.labels_visible_highway_shields
                    primary:
                        filter: { kind_detail: primary, $zoom: [10,11] }
                        draw:
                            icons:
                                visible: global.labels_visible_highway_shields
                    width_1char:
                        filter: function() { return (feature.shield_text.length === 1) }
                        draw:
                            icons:
                                size: [[6,[36px,32px]],[8,[38px,34px]]]
                    width_2char:
                        filter: function() { return (feature.shield_text.length === 2) }
                        draw:
                            icons:
                                size: [[6,[44px,36px]],[8,[44px,34px]]]
                    width_3char:
                        filter: function() { return (feature.shield_text.length === 3) }
                        draw:
                            icons:
                                size: [[6,[52px,32px]],[8,[54px,35px]]]
                    width_4char:
                        filter: function() { return (feature.shield_text.length === 4) }
                        draw:
                            icons:
                                size: [[6,[24px,18px]],[13,[26px,20px]],[15,[31px,23px]]]
                    width_5char:
                        filter: function() { return (feature.shield_text.length === 5) }
                        draw:
                            icons:
                                size: [[6,[25px,18px]],[13,[27px,20px]],[15,[32px,23px]]]
                US-NY:
                    # Match New York state highways: `US:NY`
                    filter: |
                        function() {
                            return feature.shield_text &&
                                /^US:NY$/.test(feature.network)
                                /* (/^US:NY$/.test(feature.network) || /^NY:US$/.test(feature.network)) */
                        }
                    draw:
                        icons:
                            sprite: |
                                function() { return ( 'US:NY-' + feature.shield_text.length + 'char'); }
                            visible: global.labels_visible_highway_shields
                            text:
                                offset: [0px, -1px]
                                font:
                                    fill: global.road_text_minor
                                    size: 22px
                    width_1char:
                        filter: function() { return (feature.shield_text.length === 1) }
                        draw:
                            icons:
                                size: [[6,[36px,32px]],[8,[38px,34px]]]
                    width_2char:
                        filter: function() { return (feature.shield_text.length === 2) }
                        draw:
                            icons:
                                size: [[6,[44px,36px]],[8,[44px,34px]]]
                    width_3char:
                        filter: function() { return (feature.shield_text.length === 3) }
                        draw:
                            icons:
                                size: [[6,[52px,32px]],[8,[54px,35px]]]
                    width_4char:
                        filter: function() { return (feature.shield_text.length === 4) }
                        draw:
                            icons:
                                size: [[6,[21px,17px]],[13,[24px,19px]],[15,[29px,22px]]]
                    width_5char:
                        filter: function() { return (feature.shield_text.length === 5) }
                        draw:
                            icons:
                                size: [[6,[22px,17px]],[13,[25px,19px]],[15,[30px,22px]]]
                US-PA:
                    # Match Pennsylvania state highways
                    filter: |
                        function() {
                            return feature.shield_text &&
                                /^US:PA$/.test(feature.network)
                        }
                    draw:
                        icons:
                            sprite: |
                                function() { return ( 'US:PA-' + feature.shield_text.length + 'char'); }
                            visible: global.labels_visible_highway_shields
                            text:
                                offset: [0px, 1px]
                                font:
                                    fill: global.road_text_minor
                                    size: 22px
                    width_1char:
                        filter: function() { return (feature.shield_text.length === 1) }
                        draw:
                            icons:
                                size: [[6,[36px,32px]],[8,[38px,34px]]]
                    width_2char:
                        filter: function() { return (feature.shield_text.length === 2) }
                        draw:
                            icons:
                                size: [[6,[44px,36px]],[8,[44px,34px]]]
                    width_3char:
                        filter: function() { return (feature.shield_text.length === 3) }
                        draw:
                            icons:
                                size: [[6,[52px,32px]],[8,[54px,35px]]]
                    width_4char:
                        filter: function() { return (feature.shield_text.length === 4) }
                        draw:
                            icons:
                                size: [[6,[22px,17px]],[13,[25px,19px]],[15,[30x,22px]]]
                    width_5char:
                        filter: function() { return (feature.shield_text.length === 5) }
                        draw:
                            icons:
                                size: [[6,[24px,17px]],[13,[27px,19px]],[15,[32px,22px]]]
                # USA County Routes
                US-counties:
                    filter: |
                        function() {
                            return feature.shield_text &&
                                /^\w+:\w+:(!Alternate).+$/.test(feature.network) &&
                                $zoom > 10
                        }
                    draw:
                        icons:
                            # you need to match any custom shield to the vector tile `network` values
                            sprite: function() { return ('county_shield-' + feature.shield_text.length + 'char'); }
                            # priority: 19
                            visible: global.labels_visible_highway_shields
                            text:
                                font:
                                    fill: global.road_text_minor
                                    size: 22px
                    width_1char:
                        filter: function() { return (feature.shield_text.length === 1) }
                        draw:
                            icons:
                                size: [[6,[36px,32px]],[8,[38px,34px]]]
                    width_2char:
                        filter: function() { return (feature.shield_text.length === 2) }
                        draw:
                            icons:
                                size: [[6,[44px,36px]],[8,[44px,34px]]]
                    width_3char:
                        filter: function() { return (feature.shield_text.length === 3) }
                        draw:
                            icons:
                                size: [[6,[52px,32px]],[8,[54px,35px]]]
                    width_4char:
                        filter: function() { return (feature.shield_text.length === 4) }
                        draw:
                            icons:
                                size: [[6,[25px,14px]],[13,[28px,15px]],[15,[34px,18px]]]
                    width_5char:
                        filter: function() { return (feature.shield_text.length === 5) }
                        draw:
                            icons:
                                size: [[6,[30px,14px]],[13,[33px,15px]],[15,[40px,18px]]]
        path:
            filter:
                all:
                    - kind: [path, portage_way]
                not:
                    - kind_detail: [pier]
            draw:
                lines:
                    order: function() { return feature.sort_rank; }
                    color: global.rail_line
                    width: [[15, 1.8px], [17, 3px], [19, 2m]]
                    style: dashed-lines
                    visible: global.roads_visible_paths

        track:
            filter:
                kind: path
                kind_detail: [track]
                motor_vehicle: [false, no]
            draw:
                lines:
                    order: 200
                    width: [[13, 0.65px], [14, 0.85px], [15, 1px], [17, 2.5m]]
                    visible: true
            labels-track:
                draw:
                    text-blend-order:
                        priority: 58
                        visible: global.labels_visible_service_roads
                        font:
                            fill: global.road_text_minor
                            size: [[13, 28px], [15, 30px]]
                            stroke: { color: global.text_stroke, width: 3px }
        winter_sport_pistes:
            filter: { kind: piste }
            draw:
                lines:
                    visible: global.landuse_visible_stadium
                    order: 388   # We override the server value here because Eraser Map is also a special Ski Map
                    cap: round
                    join: round
                    style: dashed-lines
                    color: '#909090'
                    width: [[13,0px],[14,1px],[15, 1.25px], [16, 2px], [18, 3m]]
                text-blend-order:
                    priority: 18
                    visible: global.labels_visible_points_of_interest
                    font:
                        fill: global.text_fill
                        size: 28px
            early:
                filter: { $zoom: { max: 15 } }
                draw:
                    text-blend-order:
                        visible: false
            early-z15:
                filter: { $zoom: [15] }
                draw:
                    text-blend-order:
                        font:
                            fill: global.text_fill
                            size: 28px

        pier:
            filter: { kind: path, kind_detail: pier }
            draw:
                lines:
                    color: global.background
                    cap: round
                    width: [[13, 0px], [14, 0.5px],[15, 1.5px], [16, 2.5px],[17, 3px],[18, 3m]]
        racetrack:
            filter: { kind: racetrack }
            draw:
                lines:
                    cap: round
                    join: round
                    color: [0.400,0.666,0.690]
                    width: [[13,0.5px],[14,1px],[15, 1px], [16, 1.5px], [18, 3px], [19, 5px]]
        airport-lines:
            filter: { kind: aeroway, kind_detail: [runway,taxiway] }
            draw:
                lines:
                    visible: global.roads_visible_taxi_and_runways
                    color: global.runway
                    cap: butt
                    width: [[10,1px],[13,3px],[15,16px],[17,60m]]
            # Features come in at zoom 9, but include mostly minor airports without POIs until z13
            early:
                filter: { $zoom: { max: 12 }, not: { landuse_kind: [aerodrome, runway, taxiway] } }
                draw:
                    lines:
                        visible: false
            not-round:
                filter: { $zoom: { min: 17 } }
                draw:
                    lines:
                        cap: butt
            taxiway:
                filter: { kind_detail: taxiway }
                draw:
                    lines:
                        color: global.aeroway
                        width: [[11,0.5px],[14,1px],[15,2px],[16,2px],[17,6px],[18,9m]]
                early:
                    filter: { $zoom: { max: 13 } }
                    draw:
                        lines:
                            visible: false
            runway:
                filter: { kind_detail: runway }
                draw:
                    lines:
                        color: global.runway

        ferry:
            filter: { kind: ferry }
            draw:
                lines:
                    visible: global.roads_visible_ferry_route
                    style: dashed-lines
                    color: global.ferry_route
                    width: [[12, 1px], [13, 1.5px], [15, 2.5px]]
        aerialway:
            filter: { kind: aerialway }
            draw:
                lines:

                    color: global.aeroway
                    width: [[14, 0.5px], [15, 1.0px], [16, 2m]]
            gondola_cable_car:
                filter: { kind_detail: [gondola, cable_car] }
                draw:
                    lines:
                        color: global.minor_road
                        width: [[12, 0.5px], [13, 0.5px], [14, 1.75px], [15, 2.5px], [16, 2.5px], [18, 3m]]
            chair_lift:
                filter: { kind_detail: chair_lift }
                draw:
                    lines:
                        color: global.minor_road
                        width: [[12, 0.5px], [13, 0.5px], [14, 1.75px], [15, 2.5px], [16, 2.5px], [18, 3m]]

            aerialway-labels:
                filter: { $zoom: { min: 14 } }
                draw:
                    text-blend-order:
                        priority: 63
                        visible: global.labels_visible_points_of_interest
                        text_source: global.ux_language_text_source
                        font:
                            fill: global.text_fill
                            size: 26px
                minor:
                    filter: { not: { kind_detail: [gondola,cable_car,chair_lift] }, $zoom: { max: 17 } }
                    draw:
                        text-blend-order:
                            visible: false
                early_gondola:
                    filter: { $zoom: [14], kind_detail: [gondola,cable_car] }
                    draw:
                        text-blend-order:
                            font:
                                weight: 600
                later:
                    filter: { $zoom: { min: 15 } }
                    draw:
                        text-blend-order:
                            font:
                                weight: 600



    buildings:
        data: { source: nextzen, layer: buildings }
        filter: { $zoom: { min: 14 }, not: { location: underground, layer: -1 }}
        draw:
            polygons:
                visible: global.buildings_visible
                order: 400
                color: global.buildings
    building-small-borders:
        data: { source: nextzen, layer: buildings }
        filter: { area: { max: 1000 }, $zoom: { min: 14 }, not: { location: underground, layer: -1 }}
        draw:
            lines:
                visible: global.buildings_border_visible
                color: [0.702, 0.702, 0.702, 1.00]
                width: [[14,0],[16,1px],[17,1px],[18,2px]]
                order: function() { return feature.sort_rank; }
    building-big-borders:
        data: { source: nextzen, layer: buildings }
        filter: { area: { min: 1000 }, $zoom: { min: 14 }, not: { location: underground, layer: -1 }}
        draw:
            lines:
                visible: global.buildings_border_visible
                color: [0.702, 0.702, 0.702, 1.00]
                width: [[14,0],[17,2px]]
                order: function() { return feature.sort_rank; }


        # buildings_over_landuse:   # this is a bug that nextzen is working on
        #   draw:
        #       lines:
        #           style: lines
        #           order: function() { return feature.sort_rank; }
        #           visible: global.buildings_visible
        #           color: function() { if ((feature.area > 5000 || feature.landuse_kind == 'college' || feature.landuse_kind == 'library' || feature.landuse_kind == 'hospital' || feature.landuse_kind == 'golf_course' || feature.landuse_kind == 'university' || feature.landuse_kind == 'cemetery' || feature.landuse_kind == 'park' || feature.landuse_kind == 'apron' || feature.landuse_kind == 'aerodrome' || feature.landuse_kind == 'school') && (feature.landuse_kind != 'residential') && (feature.landuse_kind != 'commercial') && (feature.landuse_kind != 'parking') && (feature.kind_detail != 'commercial') && (feature.kind_detail != 'retail') && (feature.kind_detail != 'hotel')) { return "#666"; } else { return "#fff"; } }
        #           width: [[15,0],[16,1px]]

        buildings-labels:
            filter:
                all:
                    - { $zoom: { min: 18 } }
                    - $geometry: point
                    - not: { location: underground, kind: address }
                    - name: true
                    - function() { return global.labels_visible_building; }
                any:
                    - { $zoom: [16], area: { min: 5000 } }
                    - { $zoom: [16], area: { min: 5000 } }
                    - { $zoom: [16], area: { min: 10000 }, landuse_kind: true }
                    - { $zoom: [16], area: { min: 7000 }, kind_detail: [university, college, school, kindergarten] }
                    - { $zoom: [16], volume: { min: 50000 }, name: true }
                    - { $zoom: [17], area: { min: 3000 } }
                    - { $zoom: [17], area: { min: 2000 }, kind_detail: [university, college, school, kindergarten] }
                    - { $zoom: [18], area: { min: 1000 } }
                    - { $zoom: [18], kind_detail: [university, college, school, kindergarten] }
                    - { $zoom: [19], area: { min: 200 } }
                    - { $zoom: { min: 19 }, kind_detail: [university, college, school, kindergarten] }
                    - { $zoom: { min: 20 }, area: true }
            draw:
                text-blend-order:
                    text_source: global.ux_language_text_source
                    #interactive: global.interactive
                    move_into_tile: true
                    priority: 70
                    order: 7
                    font:
                        fill: '#666'
                        family: global.text_font_family
                        style: italic
                        transform: uppercase
                        size: 24px
                        # stroke: { color: global.text_stroke_address, width: 1 }
            building_labels-z15-z16-z17:
                filter: { $zoom: [15,16,17] }
                draw: { text-blend-order: { font: { size: 26px} } }
            building_labels-z18:
                filter: { $zoom: [18,19] }
                draw: { text-blend-order: { font: { size: 28px, weight: 600 } } }
            building_labels-z20-up:
                filter: { $zoom: { min: 20 } }
                draw: { text-blend-order: { font: { size: 30px, weight: 600  } } }
            building-labels-z16:
                filter: function() { if( $zoom == 16 && feature.name.length > 20 ) { return true; } else { return false; } }
                draw:
                    text-blend-order:
                        visible: false
            building-labels-z17:
                filter: function() { if( $zoom == 17 && feature.name.length > 30 ) { return true; } else { return false; } }
                draw:
                    text-blend-order:
                        visible: false
            building-labels-z20+:
                filter: { $zoom: { min: 20 } }
                draw:
                    text-blend-order:
                        text_source: global.ux_language_text_source_building_and_address

    boundaries:
        data: { source: nextzen, layer: boundaries }
        draw:
            lines:
                order: function() { return (feature.sort_rank + 100); }
        country:
            filter:
                - kind: country
                - admin_level: 2
            draw:
                lines:
                    visible: global.borders_visible_countries
                    color: global.nation_boundary
                    width: [[1, 0.5px], [2, 1.0px], [4, 1.5px], [9, 2.5px], [14, 3.5px], [16, 4.5px], [17, 14m]]
            water:
                filter: { maritime_boundary: true }
                draw:
                    lines:
                        visible: false
            # labels-z9-up:
            #     filter: { name: true, $zoom: { min: 9 }, not: { maritime_boundary: true }, kind: [country] }
            #     draw:
            #         text-blend-order:
            #             collide: false
            #             priority: 1
            #             visible: global.labels_visible_countries
            #             text_source:
            #                 left: 'name:left'
            #                 right: 'name:right'
            #             # offset: [0px,0px]
            #             # text_wrap: 100
            #             # buffer: 2px
            #             font:
            #                 height: 0px
            #                 family: global.text_font_family
            #                 size: 17px
            #                 fill: [0.00,0.00,0.00]
            #                 transform: uppercase

        other_country_boundary_disputed_etc:
            filter: { kind: [disputed, indefinite, indeterminate, lease_limit, line_of_control, overlay_limit] }
            draw:
                dashed:
                    visible: global.borders_visible_disputed
                    order: function() { return (feature.sort_rank + 100); }
                    color: global.nation_boundary
                    width: [[1,0.2px],[9,1.5px],[17,10m]]
            disputed:
                filter: { kind: [disputed, line_of_control] }
                draw:
                    dashed:
                        visible: false
                    dashed_big:
                        visible: global.borders_visible_disputed
                        order: function() { return (feature.sort_rank + 100); }
                        color: global.nation_boundary
                        width: [[1,0.5px],[9,2.5px],[17,14m]]

        region:
            filter:
                - kind: [region,macroregion]
                - kind_detail: [3,4]
            draw:
                lines:
                    visible: global.borders_visible_states
                    color: global.state_boundary
                    width: [[0, 0.5px], [2, 1.0px], [5, 1.25px], [6, 1.5px], [7, 1.75px], [9, 2.0px], [14, 4.0px], [16, 5.0px], [17, 10m]]
            water:
                filter: { maritime_boundary: true }
                draw:
                    lines:
                        visible: false
            early:
                filter: { not: { min_zoom: [1,2] }, $zoom: { max: 8 } }
                draw:
                    lines:
                        visible: false
                water:
                    filter: { maritime_boundary: true }
                    draw:
                        lines:
                            visible: false
            labels-z9-up:
                filter: { name: true, $zoom: { min: 9 }, not: { maritime_boundary: true } }
                draw:
                    text-blend-order:
                        # repeat_distance: 100px
                        priority: 3
                        # order: 1000
                        visible: global.labels_visible_states
                        text_source:
                            left: 'name:left'
                            right: 'name:right'
                        # text_wrap: 100
                        # offset: [0px,2px]
                        collide: false
                        align: left
                        font:
                            family: global.text_font_family
                            size: 22px
                            # height: 20px
                            fill: [0.35,0.35,0.35]
                            transform: uppercase
        city_walls:
            filter: { kind: city_wall }
            draw:
                lines:
                    color: global.city_wall
                    width: [[12, 0.75px], [13, 1.0px], [14, 1.2px], [15, 2.0px], [16, 2.5px], [19, 6m]]
        dam:
            filter: { kind: dam }
            draw:
                lines:
                    color: global.dam
                    width: [[14, 0.5px], [15, 1.0px], [16, 1.5px], [17, 2.0px], [19, 1.5m]]

    counties:
        data: { source: us_counties }
        filter:
            $zoom: { min: 6 }
        counties:
            draw:
                long-dash:
                    visible: global.borders_visible_counties
                    order: 101
                    color: global.county_boundary
                    width: [[6,1px],[8,1.5px]]

            water:
                filter: { maritime_boundary: true }
                draw:
                    lines:
                        visible: false

    places:
        data: { source: nextzen, layer: places }
        filter:
            name: true
        draw:
            icons:
                text:
                    text_source: global.ux_language_text_source
                    visible: false
                    buffer: 3px
                    font:
                        family: global.text_font_family
                        fill: global.text_fill
            # NOTE: This is a hack for localities because of an icon & text bug, see note below
            text-blend-order:
                text_source: global.ux_language_text_source
                visible: false    # labels are enabled by each layer below
                buffer: 3px
                font:
                    family: global.text_font_family
                    fill: global.text_fill
            # END NOTE

        country:
            filter:
                kind: country
                $zoom: { min: 2, max: 9 }
            draw:
                text-blend-order:
                    buffer: 10px
                    priority: 3
                    visible: global.labels_visible_countries
                    text_source: function() { if (feature["name:en"] == "People's Republic of China") { return "China"; } else { return feature["name:en"] || feature["name"]; }}
                    font:
                        family: global.text_font_family
                        fill: global.text_fill
                        weight: normal
                        transform: uppercase
                        size: 32px
            country-z2-3:
                filter:
                    $zoom: [2,3]
                draw:
                    text-blend-order:
                        font:
                            priority: 10
                            buffer: 10px
                early-ones-z2:
                    filter:
                        $zoom: [2]
                        not: { name: [United States of America,Brasil,中华人民共和国,Россия,Canada,Kalaallit Nunaat,Ísland,Australia,India,日本,Guam,Indonesia,South Africa,مصر,Nigeria,Kenya] }
                    draw:
                        text-blend-order:
                            visible: false
                early-ones-z3:
                    filter:
                        $zoom: [3]
                        name: [Guernsey,Jersey,France,Nederland,Luxembourg,Liechtenstein,San Marino,Civitatis Vaticanæ,Crna Gora,Македонија,The Gambia,Burundi,Swaziland,الإمارات العربية المتحدة,العراق,Singapore,El Salvador,Belize,Trinidad and Tobago, Saint Lucia, Montserrat,Anguilla,República Dominicana,Bahamas,British Virgin Islands,Antigua and Barbuda,Grenada,Sint Maarten,Saint Kitts and Nevis,Cayman Islands,België - Belgique - Belgien,Deutschland,España]
                    draw:
                        text-blend-order:
                            visible: false
            country-z4:
                filter:
                    $zoom: [4]
                draw:
                    text-blend-order:
                        buffer: 10px
                        priority: 8
                early-ones-z4:
                    filter:
                        name: [Guernsey,Jersey,Nederland,Luxembourg,Liechtenstein,San Marino,Civitatis Vaticanæ,Crna Gora,Македонија,The Gambia,Burundi,Swaziland,الإمارات العربية المتحدة,العراق,Singapore,El Salvador,Belize,Trinidad and Tobago, Saint Lucia, Montserrat,Anguilla,República Dominicana,Bahamas,British Virgin Islands,Antigua and Barbuda,Grenada,Sint Maarten,Saint Kitts and Nevis,Cayman Islands,België - Belgique - Belgien,Deutschland,España,Magyarország,Österreich,Polska,Хуссар Ирыстон,Аҧсны - Абхазия]
                    draw:
                        text-blend-order:
                            visible: false
            country-z5:
                filter:
                    $zoom: [5]
                draw:
                    text-blend-order:
                        priority: 8
                early-ones-z5:
                    filter:
                        # South Ossetia and Abkhazia aren't countries (they are disputed areas)
                        - name: [Luxembourg,Liechtenstein,San Marino,Civitatis Vaticanæ,El Salvador,Belize,België - Belgique - Belgien,"Хуссар Ирыстон - Южная Осетия","Хуссар Ирыстон","Аҧсны - Абхазия","Լեռնային Ղարաբաղի Հանրապետությու (Nagorno-Karabakh Republic)"]
                        - population: { max: 5000000 }
                    draw:
                        text-blend-order:
                            visible: false
            country-z6:
                filter:
                    $zoom: [6]
                draw:
                    text-blend-order:
                        priority: 8
                small-ones-z6:
                    filter:
                        # South Ossetia and Abkhazia aren't countries (they are disputed areas)
                        - name: [Luxembourg,Liechtenstein,San Marino,Civitatis Vaticanæ,België - Belgique - Belgien,"Хуссар Ирыстон - Южная Осетия","Хуссар Ирыстон","Аҧсны - Абхазия","Լեռնային Ղարաբաղի Հանրապետությու (Nagorno-Karabakh Republic)"]
                        - population: { max: 5000000 }
                    draw:
                        text-blend-order:
                            visible: false
            country-z7:
                # South Ossetia and Abkhazia aren't countries (they are disputed areas)
                filter: { $zoom: { min: 7, max: 9 } }
                draw:
                    text-blend-order:
                small-ones-z7:
                    filter:
                        $zoom: [7]
                        # South Ossetia and Abkhazia aren't countries (they are disputed areas)
                        name: [Liechtenstein,San Marino,Civitatis Vaticanæ,"Хуссар Ирыстон - Южная Осетия","Хуссар Ирыстон","Аҧсны - Абхазия","Լեռնային Ղարաբաղի Հանրապետությու (Nagorno-Karabakh Republic)"]
                    draw:
                        text-blend-order:
                            visible: false
                small-pop:
                    filter:
                        - population: { max: 5000000 }
                    draw:
                        text-blend-order:
                            priority: 30
                            font:
                                size: 30px

        region:
            filter:
                kind: region
                $zoom: { min: 4, max: 9 }
            draw:
                text-blend-order:
                    priority: 14
                    visible: global.labels_visible_states
                    font:
                        family: global.text_font_family
                        size: 32px
                        weight: 300
                        fill: global.text_fill
            region-z4:
                filter:
                    $zoom: [4]
                    not: { name: [Western Cape,Eastern Cape,Northern Cape,North West,Limpopo,KwaZulu-Natal,Hamburg,Freie und Hansestadt Hamburg,Neuchâtel,Nordrhein-Westfalen,Haute-Normandie,Baden-Württemberg,Bayern,Sachsen-Anhalt,Berlin,Mecklenburg-Vorpommern,Schleswig-Holstein,Brandenburg,Niedersachsen,Saarland,Thüringen,Hessen,Sachsen,Mississippi,West Virginia,Tennessee,Maryland,Delaware,Connecticut,Rhode Island,New Hampshire,Vermont,Indiana,New Jersey] }
                draw:
                    text-blend-order:
                        move_into_tile: false
                        collide: false
                        visible: global.labels_visible_states
                        text_source: global.ux_language_text_source_short
            region-z5:
                filter:
                    $zoom: [5]
                    not: { name: [Western Cape,Eastern Cape,Northern Cape,North West,Limpopo,KwaZulu-Natal,Hamburg,Freie und Hansestadt Hamburg,Neuchâtel,Nordrhein-Westfalen,Haute-Normandie,Baden-Württemberg,Bayern,Sachsen-Anhalt,Berlin,Mecklenburg-Vorpommern,Schleswig-Holstein,Brandenburg,Niedersachsen,Saarland,Thüringen,Hessen,Sachsen,Connecticut, Rhode Island, Delaware] }
                draw:
                    text-blend-order:
                        move_into_tile: false
                        collide: true
                        visible: global.labels_visible_states
                        text_source: global.ux_language_text_source_short
            region-z6:
                filter:
                    $zoom: [6]
                    not: { name: [Western Cape,Eastern Cape,Northern Cape,North West,Limpopo,KwaZulu-Natal,Hamburg,Freie und Hansestadt Hamburg,Neuchâtel,Nordrhein-Westfalen,Haute-Normandie,Baden-Württemberg,Bayern,Sachsen-Anhalt,Berlin,Mecklenburg-Vorpommern,Schleswig-Holstein,Brandenburg,Niedersachsen,Saarland,Thüringen,Hessen,Sachsen] }
                draw:
                    text-blend-order:
                        visible: global.labels_visible_states
                        text_source: global.ux_language_text_source_short

            region-z7-z8:
                filter: { $zoom: [7,8] }
                draw:
                    text-blend-order:
                        visible: global.labels_visible_states
                        text_source: global.ux_language_text_source_short_proxy_name
                        font:
                            size: 30px
                            weight: 200
                            transform: uppercase
                pesky:
                    filter:
                        $zoom: [7]
                        name: [Western Cape,Eastern Cape,Northern Cape,North West,Limpopo,KwaZulu-Natal,Hamburg,Freie und Hansestadt Hamburg,Neuchâtel,Nordrhein-Westfalen,Haute-Normandie,Baden-Württemberg,Bayern,Sachsen-Anhalt,Berlin,Mecklenburg-Vorpommern,Schleswig-Holstein,Brandenburg,Niedersachsen,Saarland,Thüringen,Hessen,Sachsen]
                    draw:
                        text-blend-order:
                            visible: false

                abbrev-small-ones-z7:
                    filter:
                        $zoom: [7]
                        name: [Delaware,New Jersey,Connecticut,Rhode Island,Massachusetts,New Hampshire,Vermont]
                    draw:
                        text-blend-order:
                            text_source: global.ux_language_text_source_abbreviation
                            font: { transform: uppercase }
                region-z8:
                    filter:
                        $zoom: [8]
                    draw:
                        text-blend-order:
                            text_source: global.ux_language_text_source
                    no-pop:
                        filter:
                            any:
                                - population: false
                                - population: { max: 1000000 }
        populated-places:
            filter:
                kind: locality
                $zoom: { min: 6 }
                not: { kind_detail: ['hamlet'] }
            draw:
                icons:
                    visible: global.labels_visible_cities
                    size: [[10,4px],[11,0px]]
                    sprite: townspot-xs
                    buffer: 8px
                    priority: 30
                    text:
                        visible: global.labels_visible_cities
                        buffer: 3px
                        font:
                            family: global.text_font_family
                            weight: normal
                            size: [[8,26px],[10,28px],[12,32px]]
                            fill: global.text_fill
                text-blend-order:
                    visible: global.labels_visible_cities
                    buffer: 10px
                    font:
                        size: [[8,26px],[10,28px],[12,32px]]

            #
            # NOTE: you'd think no-townspot would be the way to go, but icons with size 0px seems to have a bug to also hide the text :(
            #
            # no-townspot:
            #     filter: { $zoom: { min: 11 } }
            #     draw:
            #         icons:
            #             size: 0px
            #             text:
            #                 anchor: center
            #
            # NOTE: So instead we play a shell game with symbolizers per zoom
            #
            _icons_later:
                filter: { $zoom: { min: 11 } }
                draw:
                    icons:
                        visible: false
                    text-blend-order:

            _text_early:
                filter: { $zoom: { max: 11 } }
                draw:
                    text-blend-order:
                        visible: false
            # END HACK

            z8-50k-below:
                filter: { $zoom: [8,9], population: { min: 10000, max: 50000 } }
                draw:
                    icons:
                        buffer: 25px
            z9-10k-below:
                filter: { $zoom: [8,9], population: { max: 10000 } }
                draw:
                    icons:
                        buffer: 18px
            z9-no-population:
                filter: { $zoom: [8,9], population: false }
                draw:
                    icons:
                        buffer: 10px

            # HACK
            # NOTE: These should use icon: buffer instead of going visible: false, but there are problems using icon here :(
            # This fixes Paris area, but causes problems for small places in the USA eg Table Bluff near Eureka, California.
            funky-village:
                filter: { $zoom: [11], population: { max: 1000 }, kind_detail: [village] }
                draw:
                    text-blend-order:
                        visible: false
            funky-isolated_dwelling:
                filter: { $zoom: [13], kind_detail: [isolated_dwelling] }
                draw:
                    text-blend-order:
                        visible: false
            hamlet:
                filter: { $zoom: [13], kind_detail: hamlet }
                draw:
                    text-blend-order:
                        visible: false
            # END HACK

            # someone in London and Salt Lake City thought neighbourhoods should be tagged place: locality
            # They were wrong
            funky-fake-neighbourhoods:
                filter: { $zoom: { min: 13 }, kind_detail: [locality] }
                draw:
                    text-blend-order:
                        visible: false


            population-10m-up:
                filter:
                    population: { min: 10000000 }
                    zoom: { min: 4 }
                draw:
                    icons:
                        size: [[4,12px],[8,15px],[9,0px]]
                        sprite: townspot-m
                        priority: 6
                        text:
                            font:
                                size: [[8,30px],[10,32px],[12,36px]]
                                stroke: { color: global.background, width: 2 }
                    text-blend-order:
                        priority: 6
                        font:
                            size: [[8,30px],[10,32px],[12,36px]]
                capital:
                    filter: { country_capital: true, $zoom: { min: 5 } }
                    draw:
                        icons:
                            size: [[10,8px],[11,0px]]
                            sprite: capital-l
                            priority: 5
                        text-blend-order:
                            priority: 5
            population-5m-10m:
                filter:
                    population: { min: 5000000, max: 10000000 }
                    zoom: { min: 6 }
                draw:
                    icons:
                        size: [[4,10px],[8,14px],[9,0px]]
                        sprite: townspot-m
                        priority: 7
                        text:
                            font:
                                size: [[8,28px],[10,30px],[12,34px]]
                    text-blend-order:
                        priority: 7
                        font:
                            size: [[8,28px],[10,30px],[15,36px]]
                            stroke: { color: global.text_stroke, width: 2 }
                capital:
                    filter: { country_capital: true, $zoom: { min: 5 } }
                    draw:
                        icons:
                            size: [[10,8px],[11,0px]]
                            sprite: capital-l
                            priority: 6
                        text-blend-order:
                            priority: 6
            population-1m-5m:
                filter:
                    population: { min: 1000000, max: 5000000 }
                    zoom: { min: 6 }
                draw:
                    icons:
                        size: [[4,8px],[8,12px],[9,0px]]
                        sprite: townspot-m
                        priority: 9
                        text:
                            font:
                                size: [[8,28px],[10,28px],[12,32px]]
                    text-blend-order:
                        priority: 9
                        font:
                            size: [[8,28px],[10,28px],[15,36px]]
                            stroke: { color: global.text_stroke, width: 2 }
                capital:
                    filter: { country_capital: true, $zoom: { min: 5 } }
                    draw:
                        icons:
                            size: [[10,10px],[11,0px]]
                            sprite: capital-l
                            priority: 8
                        text-blend-order:
                            priority: 8
            population-500k-1m:
                filter:
                    population: { min: 500000, max: 1000000 }
                    zoom: { min: 6 }
                draw:
                    icons:
                        size: [[8,6px],[9,0px]]
                        sprite: townspot-m
                        priority: 11
                        text:
                            font:
                                size: [[8,28px],[10,28px],[12,32px]]
                                stroke: { color: global.text_stroke, width: 2 }
                    text-blend-order:
                        priority: 11
                        font:
                            size: [[8,28px],[10,28px],[15,36px]]
                            stroke: { color: global.text_stroke, width: 2 }
                capital:
                    filter: { country_capital: true, $zoom: { min: 5 } }
                    draw:
                        icons:
                            size: [[10,6px],[11,0px]]
                            sprite: capital-m
                            priority: 10
                        text-blend-order:
                            priority: 10
            population-200k-500k:
                filter:
                    population: { min: 200000, max: 500000 }
                    zoom: { min: 6 }
                draw:
                    icons:
                        size: [[8,6px],[9,6px],[10,6px],[11,0px]]
                        sprite: townspot-m
                        priority: 13
                        text:
                            font:
                                size: [[8,28px],[10,28px],[12,32px]]
                                stroke: { color: global.text_stroke, width: 2 }
                    text-blend-order:
                        priority: 13
                        font:
                            size: [[8,28px],[10,28px],[15,36px]]
                            stroke: { color: global.text_stroke, width: 2 }
                capital:
                    filter: { country_capital: true, $zoom: { min: 5 } }
                    draw:
                        icons:
                            size: [[10,6px],[11,0px]]
                            sprite: capital-m
                            priority: 12
                        text-blend-order:
                            priority: 12
            population-100k-200k:
                filter:
                    population: { min: 100000, max: 200000 }
                    zoom: { min: 6 }
                draw:
                    icons:
                        size: [[8,6px],[9,6px],[10,6px],[11,0px]]
                        sprite: townspot-m
                        priority: 15
                        text:
                            font:
                                size: [[8,28px],[10,28px],[12,30px]]
                                stroke: { color: global.text_stroke, width: 2 }
                    text-blend-order:
                        priority: 15
                        font:
                            size: [[8,26px],[10,28px],[15,34px]]
                            stroke: { color: global.text_stroke, width: 2 }
                capital:
                    filter: { country_capital: true, $zoom: { min: 5 } }
                    draw:
                        icons:
                            size: [[10,6px],[11,0px]]
                            sprite: capital-m
                            priority: 14
                        text-blend-order:
                            priority: 14
            population-50k-100k:
                filter:
                    population: { min: 50000, max: 100000 }
                    zoom: { min: 6 }
                draw:
                    icons:
                        size: [[8,5px],[9,5px],[10,6px],[11,0px]]
                        sprite: townspot-s
                        priority: 17
                        text:
                            font:
                                size: [[8,26px],[10,28px],[12,30px]]
                                stroke: { color: global.text_stroke, width: 2 }
                    text-blend-order:
                        priority: 17
                        font:
                            size: [[8,26px],[10,28px],[15,34px]]
                            stroke: { color: global.text_stroke, width: 2 }
                capital:
                    filter: { country_capital: true, $zoom: { min: 5 } }
                    draw:
                        icons:
                            size: [[10,5px],[11,0px]]
                            sprite: capital-m
                            priority: 16
                        text-blend-order:
                            priority: 16
            population-20k-50k:
                filter:
                    population: { min: 20000, max: 50000 }
                    zoom: { min: 6 }
                draw:
                    icons:
                        size: [[8,5px],[9,5px],[10,5px],[11,0px]]
                        sprite: townspot-s
                        priority: 19
                        text:
                            font:
                                size: [[8,26px],[10,28px],[12,30px]]
                                stroke: { color: global.text_stroke, width: 2 }
                    text-blend-order:
                        priority: 19
                        font:
                            size: [[8,26px],[10,28px],[15,36px]]
                            stroke: { color: global.text_stroke, width: 2 }
                capital:
                    filter: { country_capital: true, $zoom: { min: 5 } }
                    draw:
                        icons:
                            size: [[10,5px],[11,0px]]
                            sprite: capital-s
                            priority: 18
                        text-blend-order:
                            priority: 18
            population-10k-20k:
                filter:
                    population: { min: 10000, max: 20000 }
                    zoom: { min: 6 }
                draw:
                    icons:
                        size: [[8,4px],[9,4px],[10,4px],[11,0px]]
                        sprite: townspot-xs
                        priority: 21
                        text:
                            font:
                                fill: global.text_fill
                                size: [[8,26px],[10,28px],[12,32px]]
                                stroke: { color: global.text_stroke, width: 2 }
                    text-blend-order:
                        priority: 21
                        font:
                            fill: global.text_fill
                            size: [[8,26px],[10,28px],[15,36px]]
                            stroke: { color: global.text_stroke, width: 2 }
                capital:
                    filter: { country_capital: true, $zoom: { min: 5 } }
                    draw:
                        icons:
                            size: [[10,5px],[11,0px]]
                            sprite: capital-s
                            priority: 20
                        text-blend-order:
                            priority: 20
            population-5k-10k:
                filter:
                    population: { min: 5000, max: 10000 }
                    zoom: { min: 6 }
                draw:
                    icons:
                        size: [[8,4px],[9,4px],[10,4px],[11,0px]]
                        sprite: townspot-xs
                        priority: 23
                        text:
                            font:
                                fill: global.text_fill
                                size: [[8,26px],[10,28px],[12,32px]]
                                stroke: { color: global.text_stroke, width: 2 }
                    text-blend-order:
                        priority: 23
                        font:
                            fill: global.text_fill
                            size: [[8,26px],[10,28px],[15,32px]]
                            stroke: { color: global.text_stroke, width: 2 }
                capital:
                    filter: { country_capital: true, $zoom: { min: 5 } }
                    draw:
                        icons:
                            size: [[10,5px],[11,0px]]
                            sprite: capital-s
                            priority: 22
                        text-blend-order:
                            priority: 22
            population-2k-5k:
                filter:
                    population: { min: 2000, max: 5000 }
                    zoom: { min: 6 }
                draw:
                    icons:
                        size: [[8,4px],[9,4px],[10,4px],[11,0px]]
                        sprite: townspot-xs
                        priority: 25
                        text:
                            font:
                                fill: global.text_fill
                                size: [[8,26px],[10,28px],[12,32px]]
                                stroke: { color: global.text_stroke, width: 2 }
                    text-blend-order:
                        priority: 25
                        font:
                            fill: global.text_fill
                            size: [[8,26px],[10,28px],[15,32px]]
                            stroke: { color: global.text_stroke, width: 2 }
                capital:
                    filter: { country_capital: true, $zoom: { min: 5 } }
                    draw:
                        icons:
                            size: [[10,5px],[11,0px]]
                            sprite: capital-s
                            priority: 24
                        text-blend-order:
                            priority: 24
            population-1k-2k:
                filter:
                    population: { min: 1000, max: 2000 }
                    zoom: { min: 6 }
                draw:
                    icons:
                        size: [[8,4px],[9,4px],[10,4px],[11,0px]]
                        sprite: townspot-xs
                        priority: 27
                        text:
                            font:
                                fill: global.text_fill
                                size: [[8,26px],[10,28px],[12,32px]]
                                stroke: { color: global.text_stroke, width: 2 }
                    text-blend-order:
                        priority: 27
                        font:
                            fill: global.text_fill
                            size: [[8,26px],[10,28px],[15,32px]]
                            stroke: { color: global.text_stroke, width: 2 }
                capital:
                    filter: { country_capital: true, $zoom: { min: 5 } }
                    draw:
                        icons:
                            size: [[10,5px],[11,0px]]
                            sprite: capital-s
                            priority: 26
                        text-blend-order:
                            priority: 26
            population-200-1k:
                filter:
                    population: { min: 200, max: 1000 }
                    zoom: { min: 6 }
                draw:
                    icons:
                        size: [[8,4px],[9,4px],[10,4px],[11,0px]]
                        sprite: townspot-xs
                        priority: 28
                        text:
                            font:
                                fill: global.text_fill
                                size: [[8,26px],[10,28px],[12,32px]]
                                stroke: { color: global.text_stroke, width: 2 }
                    text-blend-order:
                        priority: 28
                        font:
                            fill: global.text_fill
                            size: [[8,26px],[10,28px],[15,32px]]
                            stroke: { color: global.text_stroke, width: 2 }
                capital:
                    filter: { country_capital: true, $zoom: { min: 5 } }
                    draw:
                        icons:
                            size: [[10,5px],[11,0px]]
                            sprite: capital-s
                            priority: 27
                        text-blend-order:
                            priority: 27
    mx_states:
        data: {source: mexican_states }
        # filter:
        #     $zoom: { min: 6 }
        states:
            draw:
                lines:
                    visible: global.borders_visible_states
                    order: 101
                    color: global.state_boundary
                    width: [[0, 0.5px], [2, 1.0px], [5, 1.25px], [6, 1.5px], [7, 1.75px], [9, 2.0px], [14, 4.0px], [16, 5.0px], [17, 10m]]
            water:
                filter: { maritime_boundary: true }
                draw:
                    lines:
                        visible: false

    neighborhoods:
        data: { source: la_hoods }
        neighbourhoods:
            filter:
                $zoom: { min: 13 }
            draw:
                text-blend-order:
                    text_source:
                    visible: global.labels_visible_neighborhoods
                    priority: 19
                    # buffer: 80px
                    text_wrap: 11
                    # max_lines: 5
                    collide: true
                    move_into_tile: false
                    font:
                        family: global.text_font_family
                        fill: global.text_fill_gray
                        weight: normal
                        style: italic
                        stroke: { color: global.text_stroke, width: 3 }
                        size: 28px


    pois:
        data: { source: nextzen, layer: pois }
        filter:
            all:
                - kind: [park,hospital,cemetery,school,golf_course,university,stadium,college,beach,aerodrome]
                # - not: { kind: [attraction,building,address,farm,apron,residential,commercial,industrial,peak,viewpoint,nature_reserve,garden,museum,water_tower,substation,hotel,theatre,station,music,cinema,doityourself,parking,gate,library,information,helipad,newspaper,pedestrian,artwork,monument,tree,pub,electronics,office,pharmacy,bicycle,mall,fitness,historical,food_bank,recreation_ground,sports_centre,closed,archaeological_site,car,playground,picnic_site,bus_station] }
                - $geometry: point
                - $zoom: { min: 11 }
                # White list a few kinds to "always" show per the tile zoom inclusion, else test feature's min_zoom
                - function() { if( feature.kind == 'attraction' || feature.kind == 'landmark' || feature.kind == 'hunting' || feature.kind == 'dive_centre' || feature.kind == 'gas_canister' || feature.kind == 'hunting' || feature.kind == 'fishing_area' || feature.kind == 'playground' || feature.kind == 'toilets' || feature.kind == 'drinking_water' || feature.kind == 'cycle_barrier' || feature.kind == 'bicycle_rental_station' ) { return true; } else { return feature.min_zoom <= $zoom; } }
        draw:
            icons:
                visible: global.icon_visible_poi_landuse
                size: 0px
                sprite: function() { return feature.kind; }
                sprite_default: generic
                interactive: global.interactive
                priority: 65
                repeat_group: abc
                buffer: 7px
                text:
                    visible: global.labels_visible_points_of_interest
                    text_source: global.ux_language_text_source_abbreviation
                    text_wrap: 15
                    max_lines: 5
                    font:
                        transform: uppercase
                        family: global.text_font_family
                        weight: 300
                        style: italic
                        fill: global.text_fill
                        size: [[13,24px],[14,24px],[18,26px]]
            text:
                visible: false    # labels are enabled by each layer below, and these are only for special cases like enclosures
                move_into_tile: true # preserves text alignment w/icons in JS
                interactive: global.interactive
                text_source: global.ux_language_text_source
                font:
                    transform: uppercase
                    family: global.text_font_family
                    weight: 300
                    fill: global.text_fill
                    size: [[13,24px],[14,24px],[18,26px]]
        # improve legibility at high zooms
        poi_labels-z18:
            filter: { $zoom: { min: 18 } }
            draw:
                icons:
                    text:
                        # some pois have really long names
                        max_lines: 5


        has-name:
            filter: { name: true }

            peak:
                filter: { kind: [peak, volcano] }
                draw:
                    icons:
                        priority: 43
                low-priority-early-z13:
                    filter: { kind_tile_rank: { min: 4 }, $zoom: [13] }
                    draw:
                        icons:
                            visible: false
                            text: { visible: false }
                peak-labels-later:
                    filter: { kind: [peak, volcano], $zoom: { min: 15 } }
                    draw:
                        icons:
                            text:
                                text_source: function() { if( feature.name && feature.elevation ) { return feature.name + "\n" + feature.elevation + "m"; } else { if( feature.name ) { return feature.name; } else { return feature.elevation; } } }
            waterfall-early:
                filter: { kind: [waterfall], $zoom: { max: 14 } }
                low-priority-early-z13:
                    filter: { kind_tile_rank: { min: 4 }, $zoom: [13] }
                    draw:
                        icons:
                            visible: false
                            text: { visible: false }
            waterfall-labels:
                filter: { kind: [waterfall], $zoom: { min: 14 } }
                draw:
                    icons:
                        text:
                            text_source: function() { if( feature.name && feature.height ) { return feature.name + "\n" + feature.height + "m"; } else { if( feature.name ) { return feature.name; } else { return feature.height; } } }
            playgrounds_allotments_attraction_landmark_supermarket:
                filter:
                    all:
                        - kind: [playground, allotments, attraction, landmark, supermarket]
                        - area: true
                        - $geometry: point
                    any:
                        - { $zoom: [15], area: { min: 600 } }
                        - { $zoom: [16], area: { min: 300 } }
                        - { $zoom: { min: 17 }, area: true }
                draw:
                    icons:
                        priority: 41

            tourism-related:
                filter:
                    all:
                        - kind: [zoo, theme_park, resort, aquarium, winery, maze, stadium, enclosure, animal]
                        - area: true
                        - $geometry: point
                    any:
                        # show labels for smaller landuse areas at higher zooms
                        - { $zoom: { min: 11 }, area: { min: 400000 } }
                        - { $zoom: { min: 12 }, area: { min: 200000 } }
                        - { $zoom: { min: 13 }, area: { min: 50000 } }
                        - { $zoom: { min: 14 }, area: { min: 20000 } }
                        - { $zoom: { min: 15 }, area: { min: 2000 } }
                        - { $zoom: { min: 16 } }
                draw:
                    icons:
                        sprite: function() { return feature.kind; }
                        sprite_default: generic
                        visible: global.icon_visible_poi_landuse
                        priority: 43
                        text:
                            visible: global.labels_visible_points_of_interest
            outdoor-needing-icons:
                filter: { kind: [bicycle_repair_station, cycle_barrier, life_ring, waste_disposal, watering_place, water_point, lifeguard_tower, power_pole, power_tower, petroleum_well, communications_tower, putin, egress, hazard, put_in_egress, rapid, beacon, cross, mineshaft, adit, water_well, saddle, dune, sinkhole, rock, stone, bicycle_junction, walking_junction, dam, boat_storage, windmill, fishing, recreation_track, horse, fire_lookout, fee_station, rest_area] }
                draw:
                    icons:
                        priority: 44
            outdoor-has-icons:
                filter: { kind: [outdoor, lighthouse, saddle, picnic_area, picnic_table, camp_site, ski, mine, zoo, museum, gas, gas_canister, slipway, mineshaft, adit, recreation_track, playground, allotments, attraction, landmark] }
                draw:
                    icons:
                        priority: 44
            not-outdoor-not-landuse:
                filter: { area: false, not: { kind: [park, national_park, outdoor, bicycle_repair_station, life_ring, waste_disposal, watering_place, water_point, lifeguard_tower, power_pole, power_tower, petroleum_well, bicycle_junction, walking_junction, dam, boat_storage, windmill, playground, allotments, attraction, landmark] } }
                draw:
                    icons:
                        priority: 45

        # source icon sprite from something other than kind
        sports-pitch:
            filter: { kind: [grass, pitch] }
            draw:
                icons:
                    sprite: function() { return feature.kind_detail; }
                    priority: 69
        place_of_worship:
            filter:
                kind: [place_of_worship, wayside_chapel]
            draw:
                icons:
                    sprite: function() { return feature.religion; }
                    sprite_default: place_of_worship
        # TODO: some or all of this may be unnecessary for the sprite, but is necessary for the early filter
        building-icon:
            filter:
                kind: [apartments, auditorium, building, hangar, manor, recreation_center, retirement_home, terminal]
            draw:
                icons:
                    sprite: building
                    visible: false
            early:
                filter:
                    any:
                        # show labels for smaller landuse areas at higher zooms
                        - { $zoom: [14], area: { max: 200000 } }
                        - { $zoom: [15], area: { max: 20000 } }
                        - { $zoom: [16], area: { max: 5000 } }
                        - { $zoom: [17], area: { max: 1000 } }
                draw:
                    icons:
                        visible: false
        #end different icon sprites

        #most POI icons without name should be hidden, except these
        no-name:
            filter: { name: false }
            draw:
                icons:
                    visible: false
            # eg park polygons in SF that have area but no name, sigh
            no-name-no-area:
                filter:
                    kind: true
                    name: false
                draw:
                    icons:
                        visible: false
            # we agree with server value, always show
            # the z- in the layer name is important here
            z-always-show:
                filter:
                    kind: [geyser,hot_spring,observatory,picnic_site,playground,walking_junction,water_tower]
                draw:   { icons: { visible: global.icon_visible_poi_landuse } }

            # probaly difference with server, selectively show by zoom
            z15-always-show-but-server-show-later-z15-server-14:
                filter: { kind: [ranger_station, spring], $zoom: { min: 16 } }             # server says min_zoom: 14
                draw:   { icons: { visible: global.icon_visible_poi_landuse } }
            z17:
                filter:
                    $zoom: { min: 17 }
                    kind: [parking]
                draw: { icons: { visible: global.icon_visible_poi_landuse } }
            z18:
                # for different styles, different sets
                # since [picnic_site] doesn't have bubble-wrap icon, it's omitted here
                filter:
                    $zoom: { min: 18 }                                     # same as BW, server at 17 now (information is 16)
                    kind: [playground]
                draw: { icons: { visible: global.icon_visible_poi_landuse } }


            # area based show / hide
            playgrounds:
                filter:
                    all:
                        - kind: [playground, allotments, attraction, landmark]
                    any:
                        - { $zoom: [15], area: { min: 600 } }
                        - { $zoom: [16], area: { min: 300 } }
                        - { $zoom: { min: 17, area: true } }
                draw:
                    icons:
                        visible: global.icon_visible_poi_landuse

            # special icon and text stuff
            sports-pitch:
                filter:
                    $zoom: { min: 17 }
                    kind: [grass, pitch]
                    kind_detail: [baseball, basketball, football, hockey, soccer, tennis]
                draw:
                    icons:
                        visible: global.icon_visible_poi_landuse
                        priority: 69

            walking-or-bicycle_junction:
                filter: { kind: [bicycle_junction, walking_junction] }
                draw:
                    icons:
                        text:
                            text_source: ref

            z-hide-z15:
                filter:
                    $zoom: { max: 15 }
                    kind: [rest_area]
                draw: { icons: { visible: false } }

            outdoor-special-priority:
                filter: { kind: [dam,dune,fire_lookout,hazard,lifeguard_tower,petroleum_well,rest_area,rock,windmill] }
                draw:
                    icons:
                        priority: 43
                        visible: global.icon_visible_poi_landuse
                hide-early:
                    filter: { kind: [dam,recreation_track] }
                    draw:
                        icons:
                            priority: 50
                    early:
                        filter: { $zoom: { max: 15 } }
                        draw:
                            icons:
                                visible: false


        # NOTE: all natural_* should only be in landuse layer
        # suppress-icon-always:
        #     filter:
        #         kind: [natural_forest, natural_park, natural_wood]
        #     draw:
        #         icons:
        #             size: 0px
        #             priority: 100
        #             text:
        #                 font:
        #                     fill: '#666'
        #                     family: global.text_font_family
        #                     style: italic
        #                     size: [[13,24px],[14,24px],[18,26px]]
            # This should work, but doesn't. hmmm
            # no-area:
            #     filter:
            #         area: false
            #         $zoom: { max: 19 }
            #     draw:
            #         icons:
            #             visible: false

        # server problem: this should probably only have landuse layer label placements (not appear in pois layer)
        # suppress-icon-z17:
        #     filter:
        #         $zoom: { min: 19 }
        #         kind: [common, grass, houseboat, pedestrian, railway, ship, wetland]
        #     draw:
        #         icons:
        #             size: 0px
        #             text: { font: { style: italic } }

        # the server should be setting better values here
        z-server-friend:
            hide-until-z12-any:
                filter:
                    kind: [landmark, museum, prison]
                    $zoom: { max: 13 }
                draw:
                    icons:
                        visible: false
            hide-until-z14-any:
                filter:
                    kind: [natural_forest, natural_park, natural_wood]
                    $zoom: { max: 14 }
                draw:
                    icons:
                        visible: false
            hide-until-z15-any:
                filter:
                    kind: [motorway_junction]
                    $zoom: { max: 15 }
                draw:
                    icons:
                        visible: false
            hide-until-z15-no-area:
                filter:
                    area: false
                    $zoom: { max: 15 }
                    kind: [park]
                draw:
                    icons:
                        visible: false
            hide-until-z15-with-area:
                filter:
                    area: true
                    $zoom: { max: 20 }
                    kind: [nursing_home]
                draw:
                    icons:
                        visible: false
            hide-until-z16-any:
                filter:
                    kind: [fire_station, grass, tram_stop, post_office]
                    $zoom: { max: 20 }
                draw:
                    icons:
                        visible: false
            hide-until-z16-no-area:
                filter:
                    area: false
                    kind: [bicycle, allotments, garden]
                    $zoom: { max: 16 }
                draw:
                    icons:
                        visible: false
            # no POIs for commercial, residential
            hide-until-z17-any:
                filter:
                    $zoom: { max: 20 }
                    kind: [bank, bus_stop, car_sharing, wood, platform, cafe, restaurant, fast_food, bar, place_of_worship, police,supermarket,fuel,department_store]
                draw:
                    icons:
                        visible: false
            hide-until-z17-with-area:
                filter:
                    area: true
                    $zoom: { max: 20 }
                    kind: [common, grass, houseboat, pitch, railway, ship, wetland]
                draw:
                    icons:
                        visible: false
            hide-until-z17-no-area:
                filter:
                    area: false
                    $zoom: { max: 19 }
                    # note: atm and drinking_water appear hear and in area versions
                    kind: [accountant, administrative, advertising_agency, animal, architect, association, atm, bakery, bed_and_breakfast, bicycle_rental_station, books, butcher, car, car_repair, chalet, clothes, company, computer, consulting, convenience, doityourself, drinking_water, dry_cleaning, educational_institution, emergency_phone, employment_agency, estate_agent, fashion, financial, florist, foundation, gift, government, greengrocer, guest_house, hairdresser, hostel, hotel, insurance, it, jewelry, lawyer, mast, memorial, mobile_phone, motel, newspaper, ngo, notary, optician, parking, pet, physician, political_party, post_box, religion, research, subway_entrance, tax_advisor, telecommunication, telephone, theatre, therapist, traffic_signals, travel_agent, water_tower,toys,bar,hotel]
                draw:
                    icons:
                        visible: false
            hide-until-z18-any:
                filter:
                    kind: [atm, bus_stop, drinking_water]
                    $zoom: { max: 19 }
                draw:
                    icons:
                        visible: false
            hide-until-z18-no-area:
                filter:
                    $zoom: { max: 20 }
                    area: false
                    kind: [bench, parking, waste_basket]
                draw:
                    icons:
                        visible: false
            hide-until-z19-any:
                filter:
                    $zoom: { max: 19 }
                    kind: [bicycle_parking, burial_vault, car_sharing]
                draw:
                    icons:
                        visible: false

            # hide based on kind and area filters
            military-early:
                filter:
                    kind: [military]
                    any:
                        # show labels for smaller landuse areas at higher zooms
                        - { $zoom: [8], area: { max: 50000000 } }
                draw:
                    icons:
                        visible: false

        university-late:
            filter:
                {kind: [university, college], { $zoom: { min: 13} } }
            draw:
                icons:
                    visible: global.icon_visible_poi_landuse
                    size: 0px
                    text:
                        visible: global.labels_visible_points_of_interest
                        priority: 40
                        text_wrap: 15
                        max_lines: 5
                        text_source: global.ux_language_text_source_abbreviation
                        placement: centroid
                        font:
                            weight: normal
                            style: italic
                            fill: global.text_fill
            school-early:
                filter:
                    kind: [school, kindergarten]
                    any:
                        # show labels for smaller landuse areas at higher zooms
                        - { $zoom: [13], area: { max: 100000 } }
                        - { $zoom: [14], area: { max: 50000 } }
                        - { $zoom: [15], area: { max: 10000 } }
                        - { $zoom: [16], area: { max: 5000 } }
                        - { $zoom: [17], area: { max: 2000 } }
                draw:
                    icons:
                        visible: false
            garden-area-early:
                filter:
                    kind: [garden, allotments]
                    any:
                        # limit show smaller landuse areas to higher zooms
                        - { $zoom: [12], area: { max: 500000 } }
                        - { $zoom: [13], area: { max: 100000 } }
                        - { $zoom: [14], area: { max: 10000 } }
                        - { $zoom: [15], area: { max: 5000 } }
                draw:
                    icons:
                        visible: false
            cemetery-early:
                filter:
                    kind: [cemetery]
                    # limit show smaller landuse areas to higher zooms
                    any:
                        - { $zoom: [12], area: { max: 3000000 } }
                draw:
                    icons:
                        visible: false
            golf_course-early:
                filter:
                    kind: golf_course
                    any:
                        - { $zoom: [12], area: { max: 2500000 } }
                draw:
                    icons:
                        visible: false
            office-early:
                filter:
                    - { kind: [insurance, office, company], $zoom: [15], area: { max: 10000 } }
                    - { kind: [insurance, office, company], $zoom: [16], area: { max: 5000 } }
                draw:
                    icons:
                        visible: false
            landuse-labels-green-areas-not-national-park:
                filter:
                    kind: [park, conservation, protected_area, nature_reserve, forest, grass]
                    any:
                    # show labels for smaller landuse areas at higher zooms
                    - { $zoom: { max: 6 }, area: true }
                    - { $zoom: [6],    area: { max: 5000000000 } }
                    - { $zoom: [7],    area: { max: 5000000000 } }
                    - { $zoom: [8],    area: { max: 1000000000 } }
                    - { $zoom: [9],    area: { max: 100000000 } }
                    - { $zoom: [10],   area: { max: 50000000 } }
                    - { $zoom: [11],   area: { max: 20000000 } }
                    - { $zoom: [12],   area: { max: 5000000 } }
                    - { $zoom: [13],   area: { max: 200000 } }
                    - { $zoom: [14],   area: { max: 50000 } }
                    - { $zoom: [15],   area: { max: 5000 } }
                    - { $zoom: [16],   area: { max: 1000 } }
                draw:
                    icons:
                        visible: false
                wilderness-areas-early:
                    filter: function() { return $zoom < 9 && feature.name && (feature.name.indexOf("Wilderness") > -1 || feature.name.indexOf("BLM") > -1 || feature.protect_class == '1' || feature.protect_class == '1a' || feature.protect_class == '1b' ); }
                    draw:
                        icons:
                            visible: false
                not-national-park:
                    filter: function() { return feature.name && !((feature.name.indexOf("National Park") > -1) || feature.name.indexOf("National Monument") > -1); }
                    early:
                        filter: { $zoom: { max: 8 } }
                        draw:
                            icons:
                                visible: false
            landuse-labels-not-any-above:
                filter:
                    $zoom: { max: 11 }
                    not: { kind: [aerodrome, airport, allotments, aquarium, attraction, battlefield, beach, cemetery, college, conservation, forest, garden, glacier, golf_course, grass, kindergarten, landmark, maze, national_park, nature_reserve, park, playground, protected_area, resort, school, stadium, station, theme_park, university, winery, winter_sports, zoo] }
                draw:
                    icons:
                        visible: false
            glacier:
                filter: { $zoom: { max: 14 }, kind: glacier, area: false }
                draw:
                    icons:
                        visible: false


        # set special priority, sprite, and text styles per kind
        has-area:
            filter: { area: true }
            draw:
                icons:
                    priority: 41

        national-park-protected-areas:
            filter:
                kind: national_park
            draw:
                icons:
                    visible: global.icon_visible_poi_landuse
                    size: 0px
                    sprite: park
                    priority: 41
                    text:
                        visible: global.labels_visible_points_of_interest
                        font:
                            fill: global.text_fill
                            style: italic

        parks:
            filter:
                - kind: [park, conservation, grass]
                - { kind: protected_area, not: { protect_class: [6, '6'] } }
            draw:
                icons:
                    visible: global.icon_visible_poi_landuse
                    size: 0px
                    sprite: park
                    priority: 41
                    text:
                        visible: global.labels_visible_points_of_interest
                        font:
                            fill: global.text_fill
                            style: italic

            only-text-later:
                filter: { kind: [grass], $zoom: { min: 16 } }
                draw:
                    icons:
                        size: 0px
                        text:
                            font:
                                style: italic
        forest:
            filter:
                - kind: forest
                - { kind: protected_area, protect_class: [6, '6'] }
            draw:
                icons:
                    visible: global.icon_visible_poi_landuse
                    size: 0px
                    sprite: forest
                    priority: 41
                    text:
                        visible: global.labels_visible_points_of_interest
                        font:
                            fill: global.text_fill
                            style: italic
        beach:
            filter:
                kind: [beach]
            draw:
                icons:
                    visible: true
                    size: 0px
                    text:
                        visible: global.labels_visible_points_of_interest
                        font:
                            fill: global.text_fill
        airport:
            filter:
                kind: [airport, aerodrome]
            draw:
                icons:
                    visible: global.labels_visible_points_of_interest
                    size: 0px
                    priority: 42
                    text:
                        text_source: global.ux_language_text_source
            early:
                filter: { $zoom: [9,10,11,12,13] }
                draw: { icons: { text: { text_source: iata } } }
        enclosure-related:
            filter:
                kind: [enclosure, animal]
            draw:
                icons:
                    priority: 43
                    size: 0px
                    text:
                        text_wrap: 10
                        font:
                            style: italic
                            weight: normal
        glacier:
            filter:
                kind: glacier
            draw:
                icons:
                    size: 0px
                    visible: global.icon_visible_poi_landuse
                    text:
                        visible: global.labels_visible_points_of_interest
                        priority: 44
                        text_wrap: 10
                        font:
                            weight: normal
                            style: italic
        building-like:
            filter: { kind: [commercial,residential,warehouse,public,dormitory], osm_relation: false }
            draw:
                icons:
                    sprite: building

        garden-no-area-early:
            filter: { kind: [garden, allotments], $zoom: [16], area: false }
            draw:
                icons:
                    priority: 45
                    size: 0px
                    text:  { font: { size: 24px, style: italic } }
        garden-no-area-later:
            filter: { kind: [garden, allotments], $zoom: { min: 17 }, area: false }
            draw:
                icons:
                    priority: 45
                    size: 0px
                    text:  { font: { size: 24px, style: italic } }

        parking-labels:
            filter:
                kind: [parking]
                $zoom: { min: 18 }
            draw:
                icons:
                    text:
                        visible: global.labels_visible_points_of_interest
                        font:
                            size: 24px
        tower:
            filter: { kind: [tower], label_placement: true }
            draw:
                icons:
                    size: 0px
                    visible: global.icon_visible_poi_landuse
                    text:
                        font:
                            style: italic


        airport-gate:
            filter: { kind: aeroway_gate }
            draw:
                icons:
                    visible: false
                text-blend-order:
                    visible: false
                    text_source: ref
                    priority: 63
                    font:
                        fill: global.text_fill_exits
                        size: [[16,9px],[17,12px],[20,14px]]
            later:
                filter: { $zoom: { min: 19 } }
                draw:
                    icons:
                        text:
                            font:
                                weight: 600

    water-area-labels:
        data: { source: nextzen, layer: [water] }
        visible: global.labels_visible_water
        filter:
            all:
                - name: true
                - $geometry: point
                - not: { kind: [riverbank, dock, playa] }
                - area: true
            any:
                # show labels for smaller landuse areas at higher zooms
                - { $zoom: { min: 5 },  area: { min: 10000000000 } }
                - { $zoom: { min: 6 },  area: { min: 5000000000 } }
                - { $zoom: { min: 7 },  area: { min: 400000000 } }
                - { $zoom: { min: 8 },  area: { min: 200000000 } }
                - { $zoom: { min: 9 },  area: { min: 100000000 } }
                - { $zoom: { min: 10 }, area: { min: 100000000 } }
                - { $zoom: { min: 11 }, area: { min: 10000000 } }
                - { $zoom: { min: 12 }, area: { min: 2000000 } }
                - { $zoom: { min: 13 }, area: { min: 1000000 } }
                - { $zoom: { min: 14 }, area: { min: 500000 } }
                - { $zoom: { min: 15 }, area: { min: 100000 } }
                - { $zoom: { min: 15 }, area: { min: 50000 } }
                - { $zoom: { min: 16 }, area: { min: 20000 } }
                - { $zoom: { min: 17 } }
        default-label-text:
            draw:
                text-blend-order:
                    text_source: global.ux_language_text_source
                    font:
                        fill: global.text_water
                        family: global.text_font_family
                        style: italic
                        weight: normal
                        size: 28px
                        # stroke: { color: [0.878,0.929,0.980], width: 2 }
        lakes-z5:
            filter: { $zoom: [5] }
            draw:
                text-blend-order: { font: { size: 24px } }
        lakes-z6:
            filter: { $zoom: [6] }
            draw:
                text-blend-order: { font: { size: 28px } }
        lakes-z8:
            filter: { $zoom: [8] }
            draw:
                text-blend-order: { font: { size: 30px } }

    ocean-sea-labels:
        data: { source: nextzen, layer: water }
        visible: global.labels_visible_water
        filter: { name: true, kind: [sea, ocean] }
        draw:
            text-blend-order:
                text_source: global.ux_language_text_source
                font:
                    fill: global.text_water
                    family: global.text_font_family
                    weight: normal
                    style: italic
                    size: 22px
                    transform: uppercase
        ocean-labels:
            draw:
                text-blend-order:
                    font:
                        size: [[1,22px],[2,22px],[3,22px],[4,24px]]

        sea-early:
            filter: { $zoom: [3], kind: sea }
            draw: { text-blend-order: { visible: false } }
        sea-spacer:
            filter: { not: { kind: [ocean] }, $zoom: { min: 4 } }
            draw:
                text-blend-order:
                    text_source: global.ux_language_text_source_sea
                    text_wrap: false

        sea-labels:
            filter: { not: { kind: [ocean] } }
            draw:
                text-blend-order:
                    font:
                        fill: global.text_water
                        size: [[4,22px],[6,22px],[8,24px]]

    earth-labels:
        data: { source: nextzen, layer: earth }
        filter: { name: true }
        draw:
            text-blend-order:
                text_source: global.ux_language_text_source
        island:
            filter: { kind: [archipelago, island, islet] }
            draw:
                text-blend-order:
                    visible: global.labels_visible_neighborhoods
                    text_wrap: 10
                    font:
                        family: global.text_font_family
                        size: 26px
                        style: italic
                        fill: global.text_fill
                        weight: normal
                        stroke: { color: global.text_stroke, width: 4 }

    landuse:
        data: { source: nextzen, layer: landuse }
        draw:
            terrain:
                order: function() { return feature.sort_rank; }
                visible: false

        tier1:
            national_park:
                filter:
                    all:
                        - kind: [national_park, battlefield, protected_area]
                    any:
                        - not: { operator: [ "United States Forest Service" ] }
                        - protect_class: ['2','3','5']
                draw:
                    polygons:
                        visible: global.landuse_visible_park
                        style: global.landuse_style
                        color: '#dfe5c3'
                        order: 2
                us_national_park:
                    # yosemite national park, death valley national park, grand canyon national park
                    filter:
                        any:
                            - operator: [ "United States National Park Service" ]
                            - protect_class: ['2','3','5']
                        draw:
                            polygons:
                                visible: global.landuse_visible_park
                                style: global.landuse_style
                                color: '#dfe5c3'
                                order: 2
            conservation:
                filter:
                    all:
                        - $zoom: { min: 4 }
                        - kind: [protected_area, nature_reserve, national_park]
                        # - not: { protect_class: [2,3,5]}
                    draw:
                        polygons:
                            visible: global.landuse_visible_park
                            style: global.landuse_style
                            color: global.landuse_park
                            order: 1

            national_forest_level_6:
                filter:
                    all:
                        - kind: forest
                    any:
                        - protect_class: ['6']
                        - operator: ['United States Forest Service']
                draw:
                    polygons:
                        visible: global.landuse_visible_forest
                        style: global.landuse_style
                        color: global.landuse_park
                        order: 1

            parks-and-national-forests-not-national-park:
                filter:
                    all:
                        - $zoom: { min: 4 }
                        - kind: [park, national_park, nature_reserve]
                    any:
                        - not: { operator: [ "United States National Park Service" ] }
                        - not: { protect_class: ['2','3','5','6'] }
                # default for national forests and more?
                draw:
                    polygons:
                        visible: global.landuse_visible_park
                        style: global.landuse_style
                        color: global.landuse_park
                        order: 1
                national_park:
                    #filter: function() { return feature.name && (feature.name.indexOf('National Park') > -1); }
                    filter:
                        all:
                            - kind: national_park
                            - not: [ protect_class: ['2','3','5','6'], operator: [ "United States National Park Service"] ]
                    draw:
                        polygons:
                            visible: global.landuse_visible_park
                            style: global.landuse_style
                            color: global.landuse_park
                            order: 1


            # gotta be a protected area to draw green, not just a landcover type
            farm:
                filter:
                    kind: [farm, farmland]
                    $zoom: { min: 10}
                draw:
                    polygons:
                        color: global.landuse_farm
                        visible: false
                        order: 2
            forest:
                filter: { kind: [forest, wood, natural_wood, natural_forest, natural_park], $zoom: { min: 10 }, not: { operator: [ "United States Forest Service"] } }
                draw:
                    polygons:
                        visible: global.landuse_visible_forest
                        style: global.landuse_style
                        color: global.landuse_park
                        order: 1
            airport:
                filter:
                    kind: aerodrome
                draw:
                    polygons:
                        visible: global.landuse_visible_airports
                        style: global.landuse_style
                        color: global.landuse_airports
                        order: 2
            military:
                filter:
                    kind: military
                draw:
                    polygons:
                        visible: global.landuse_visible_military
                        style: global.landuse_style
                        color: global.landuse_military
                        order: 2
            university:
                filter:
                    kind: [university, college]
                draw:
                    polygons:
                        visible: global.landuse_visible_college
                        style: global.landuse_style
                        color: global.landuse_college
                        order: 1
            school:
                filter:
                    kind: [school]
                draw:
                    polygons:
                        visible: global.landuse_visible_school
                        style: global.landuse_style
                        color: global.landuse_school
                        order: 1
            cemetery:
                filter:
                    kind: cemetery
                draw:
                    polygons:
                        visible: global.landuse_visible_cemetery
                        style: global.landuse_style
                        color: '#dfe5c3'
                        order: 1
            golf_course:
                filter:
                    kind: golf_course
                draw:
                    polygons:
                        visible: global.landuse_visible_park
                        style: global.landuse_style
                        color: global.landuse_park
                        order: 1
            hospital:
                filter:
                    kind: hospital
                draw:
                    polygons:
                        visible: global.landuse_visible_hospital
                        style: global.landuse_style
                        color: global.landuse_hospital
                        order: 1
            recreation_ground:
                filter:
                    kind: recreation_ground
                draw:
                    polygons:
                        visible: global.landuse_visible_park
                        style: global.landuse_style
                        color: global.landuse_park
                        order: 1
            stadium:
                filter:
                    kind: stadium
                draw:
                    polygons:
                        visible: global.landuse_visible_stadium
                        style: global.landuse_style
                        color: global.landuse_stadium
                        order: 1
            prison:
                filter:
                    kind: prison
                draw:
                    polygons:
                        visible: global.landuse_visible_prison
                        style: global.landuse_style
                        color: global.landuse_military
                        order: 1
            man-made:
                filter: { kind: [pier,wastewater_plant,works,bridge,tower,breakwater,water_works,groyne,dike,cutline] }
                draw:
                    polygons:
                        visible: global.landuse_visible_pier
                        style: global.landuse_style
                        color: global.background
                        order: 3
                pier:
                    filter: { kind: [pier,bridge,breakwater,groyne,dike,cutline], $zoom: { min: 10 } }
                    draw:
                        polygons:
                            visible: global.landuse_visible_pier
                            style: global.landuse_style
                            color: global.background
                            order: 205
            camp_site:
                filter: { kind: camp_site }
                draw:
                    polygons:
                        visible: global.landuse_visible_park
                        style: global.landuse_style
                        color: global.landuse_park
                        order: 2
            tourism-related:
                filter:
                    kind:
                        - theme_park
                        - resort
                        - aquarium
                        - winery
                        - maze
                draw:
                    polygons:
                        visible: global.landuse_visible_resort
                        style: global.landuse_style
                        color: global.landuse_theme_park
                        order: 2
            beach:
                filter:
                    kind: beach
                draw:
                    polygons:
                        visible: global.landuse_visible_beach
                        style: global.landuse_style
                        color: global.landuse_beach
                        order: 3
            garden:
                filter:
                    kind: [garden, allotments]
                draw:
                    polygons:
                        visible: global.landuse_visible_park
                        style: global.landuse_style
                        color: global.landuse_park
                        order: 3

        minor_green_stuff:
            filter:
                kind: [pitch, meadow, village_green, grass, farmland, playground]
            draw:
                polygons:
                    visible: global.landuse_visible_park
                    style: global.landuse_style
                    color: global.landuse_farm
                    order: 1
            farmland_friends:
                filter: { kind: [farmland] }
                draw:
                    polygons:
                        visible: false
                        style: global.landuse_style
                        color: global.landuse_farm
                        order: 1
            meadow_friends:
                filter: { kind: [meadow, grass] }
                draw:
                    polygons:
                        visible: global.landuse_visible_park
                        style: global.landuse_style
                        color: global.landuse_farm
                        order: 1
            pitch_later:
                filter: { kind: pitch, $zoom: { min: 17 } }
                draw:
                    lines:
                        visible: false
                        color: global.landuse_farm
                        order: 500
                        width: 0.5m
                        order: 1
        wetland:
            filter:
                kind: [wetland]
            draw:
                polygons:
                    visible: global.landuse_visible_wetland
                    style: global.landuse_style
                    color: global.landuse_wetland
                    order: 1
            place_of_worship:
                filter:
                    kind: place_of_worship
                draw:
                    polygons:
                        visible: global.landuse_visible_cemetery
                        style: global.landuse_style
                        order: 1
                        color: global.landuse_cemetery
            playground:
                filter:
                    kind: playground
                draw:
                    polygons:
                        visible: global.landuse_visible_park
                        style: global.landuse_style
                        color: global.landuse_park
                        order: 1
            school:
                filter:
                    kind: school
                draw:
                    polygons:
                        visible: global.landuse_visible_school
                        style: global.landuse_style
                        color: global.landuse_college
                        order: 1

            minor-landuse:
                filter:
                    kind:
                        - attraction
                        - artwork
                        - wilderness_hut
                        - hanami
                draw:
                    polygons:
                        visible: global.landuse_visible_park
                        style: global.landuse_style
                        color: global.landuse_park
                        order: 2

    natural-overlay:
        data: { source: nextzen, layer: earth }
        filter: { kind: [cliff, arete, ridge, valley] }
        draw:
            lines:
                order: 999
        ridge_valley:
            filter: { kind: [ridge, valley] }
            draw:
                lines:
                    visible: false
                text-blend-order:
                    priority: 50
                    font:
                        fill: global.text_fill
                        weight: normal
                        size: 26px
                        style: italic
                        stroke: { color: global.landuse_park, width: 3 }
            ridge:
                filter: { kind: ridge }
                draw:
                    lines:
                        visible: false
                    text-blend-order:
                        font:
                            fill: global.text_fill
                            weight: normal
                            size: 26px
                            style: italic
                            stroke: { color: global.landuse_park, width: 3 }
